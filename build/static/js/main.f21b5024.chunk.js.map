{"version":3,"sources":["store/posts/actions.ts","store/posts/types.ts","app/routes/NewPost/NewPost.tsx","app/routes/EditPost/EditPost.tsx","app/components/Head/Head.tsx","app/components/Layout/Navigation/Navigation.tsx","app/components/Layout/Navigation/Dropdown.tsx","app/components/Layout/Layout.tsx","store/categories/actions.ts","store/categories/types.ts","app/components/PostCard/PostCard.tsx","app/components/PostList/PostList.tsx","app/routes/Posts/Posts.tsx","store/comments/actions.ts","store/comments/types.ts","app/common/styles.ts","app/components/Controls/Controls.tsx","app/components/EditComment/EditComment.tsx","app/components/Comment/Comment.tsx","app/components/CommentList/CommentList.tsx","app/common/helpers.ts","app/components/NewComment/NewComment.tsx","app/routes/PostView/PostView.tsx","app/App.tsx","store/posts/reducers.ts","store/categories/reducers.ts","store/comments/reducers.ts","store/reducers/index.ts","api/config.ts","api/index.ts","store/posts/sagas.ts","store/categories/sagas.ts","store/comments/sagas.ts","store/sagas/index.ts","store/middleware/index.ts","store/index.ts","index.tsx"],"names":["votePost","id","option","type","storePost","post","mapDispatchToProps","onNewPost","author","category","body","title","processNewPost","connector","connect","state","props","categories","filter","c","name","history","useState","setTitle","setBody","setAuthor","setCategory","useEffect","elements","document","querySelectorAll","instances","M","FormSelect","init","destroy","className","onSubmit","e","preventDefault","push","required","value","onChange","target","htmlFor","map","key","style","height","width","onUpdatePost","updatePost","posts","find","p","match","params","exists","updatedTitle","setUpdatedTitle","updatedBody","setUpdatedBody","updated","setUpdated","to","placeholder","defaultValue","Head","Helmet","content","href","rel","Navigation","dropdownRef","dataTarget","ref","data-target","Dropdown","dataTargetId","path","pathname","hash","getCategories","sidenavRef","useRef","categoryDDRef","current","Sidenav","children","sortedPosts","sort","a","b","orderBy","timestamp","voteScore","Posts","location","slice","orderParams","setOrderParams","newComment","comment","voteComment","centeralized","display","justifyContent","alignItems","Controls","deleteHandler","upvoteHandler","downvoteHandler","editHandler","onClick","EditComment","editedBody","setEditedBody","comments","dispatch","onUpvote","onDownvote","onDelete","onUpdate","ts","updateComment","editing","setEditing","editElement","Date","getTime","toLocaleString","parentId","emptyPost","deleted","processNewComment","transform","fontSize","postId","onLoad","getComments","getPosts","exact","component","NewPost","EditPost","PostView","initialState","storePosts","action","storedPost","concat","newPost","deletePost","storeComments","parentDeleted","storeComment","storedComment","deleteComment","combineReducers","config","baseURL","instance","axios","create","headers","Authorization","API","get","getPost","put","delete","getComment","commentId","getPostsSaga","getPostSaga","processNewPostSaga","votePostSaga","deletePostSaga","updatePostSaga","postsSaga","data","uuid","takeEvery","getCategoriesSaga","categoriesSaga","getCommentsSaga","getCommentSaga","voteCommentSaga","deleteCommentSaga","updateCommentSaga","newCommentSaga","sagaMiddleware","createSagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","createStore","reducers","middleware","run","commentsSaga","app","store","ReactDOM","render","getElementById"],"mappings":"oMAkDO,SAASA,EAASC,EAAYC,GACjC,MAAO,CACHC,KCnCiB,YDoCjBF,KACAC,UAYD,SAASE,EAAUC,GACtB,MAAO,CACHF,KC/CkB,aDgDlBE,Q,2BEtDFC,EAAqB,CACvBC,UADuB,SACbC,EAAgBC,EAAkBC,EAAcC,GACtD,OFOD,SAAwBH,EAAgBE,EAAcD,EAAkBE,GAC3E,MAAO,CACHR,KCXwB,mBDYxBK,SACAE,OACAD,WACAE,SEbOC,CAAeJ,EAAQE,EAAMD,EAAUE,KA+GvCE,EA3GGC,aAZM,SAACC,EAAcC,GAAsB,IAAD,EACxD,MAAO,CACHC,WAAU,UAAEF,EAAME,kBAAR,aAAE,EAAkBC,QAAO,SAAAC,GAAC,MAAe,QAAXA,EAAEC,WAUTd,EA2G5BO,EArGF,SAACG,GAAkB,IACpBC,EAAmCD,EAAnCC,WAAYV,EAAuBS,EAAvBT,UAAWc,EAAYL,EAAZK,QADJ,EAEDC,mBAAiB,IAFhB,mBAEpBX,EAFoB,KAEbY,EAFa,OAGHD,mBAAiB,IAHd,mBAGpBZ,EAHoB,KAGdc,EAHc,OAICF,mBAAiB,IAJlB,mBAIpBd,EAJoB,KAIZiB,EAJY,OAKKH,mBAAiB,IALtB,mBAKpBb,EALoB,KAKViB,EALU,KAyB3B,OAlBAC,qBAAU,WACN,IAAMC,EAAWC,SAASC,iBAAiB,UACrCC,EAAYC,EAAEC,WAAWC,KAAKN,GAEpC,OAAO,WAAO,IAAD,gBACYG,GADZ,IACT,2BAAgC,SACnBI,WAFJ,kCAKd,IAUC,6BACI,wCACA,0BAAMC,UAAU,UAAUC,SAVlC,SAAsBC,GAClBA,EAAEC,iBAEFhC,EAAUC,EAAQC,EAAUC,EAAMC,GAClCU,EAAQmB,KAAR,iBAAuB/B,MAOf,yBAAK2B,UAAU,OACX,yBAAKA,UAAU,sBACX,2BACInC,GAAG,SACHE,KAAK,OACLiC,UAAU,WACVK,UAAQ,EACRC,MAAOlC,EACPmC,SAAU,SAAAL,GAAC,OAAIb,EAAUa,EAAEM,OAAOF,UAEtC,2BAAOG,QAAQ,UAAf,WAEJ,yBAAKT,UAAU,sBACX,4BACInC,GAAG,WACH0C,SAAU,SAAAL,GAAC,OAAIZ,EAAYY,EAAEM,OAAOF,QACpCD,UAAQ,GAEPxB,EAAW6B,KAAI,gBAAG1B,EAAH,EAAGA,KAAH,OACZ,4BAAQ2B,IAAK3B,EAAMsB,MAAOtB,GACrBA,OAIb,2BAAOyB,QAAQ,YAAf,cAGR,yBAAKT,UAAU,OACX,yBAAKA,UAAU,uBACX,2BACInC,GAAG,QACHE,KAAK,OACLiC,UAAU,WACVK,UAAQ,EACRC,MAAO/B,EACPgC,SAAU,SAAAL,GAAC,OAAIf,EAASe,EAAEM,OAAOF,UAErC,2BAAOG,QAAQ,SAAf,WAGR,yBAAKT,UAAU,OACX,yBAAKA,UAAU,uBACX,8BACInC,GAAG,OACHmC,UAAU,uBACVY,MAAO,CACHC,OAAQ,SAEZP,MAAOhC,EACPiC,SAAU,SAAAL,GAAC,OAAId,EAAQc,EAAEM,OAAOF,QAChCD,UAAQ,IAEZ,2BAAOI,QAAQ,QAAf,UAGR,yBAAKT,UAAU,OACX,yBAAKA,UAAU,uBACX,4BACIA,UAAU,kCACVY,MAAO,CACHE,MAAO,SAHf,eC/FlB5C,EAAqB,CACvB6C,aADuB,SACVlD,EAAYU,EAAeD,GACpC,OHqBD,SAAoBT,EAAYU,EAAeD,GAClD,MAAO,CACHP,KCzBmB,cD0BnBF,KACAU,QACAD,QG1BO0C,CAAWnD,EAAIU,EAAOD,KA2FtBG,EAvFGC,aAdM,SAACC,EAAcC,GAAgC,IAAD,EAC5DX,EAAI,UAAGU,EAAMsC,aAAT,aAAG,EAAaC,MAAK,SAAAC,GAAC,OAAIA,EAAEtD,KAAQe,EAAMwC,MAAMC,OAAexD,MACzE,MAAO,CACHI,OACAqD,SAAQrD,KAU2BC,EAuF5BO,EAjFF,SAACG,GAAkB,IACpBX,EAAwCW,EAAxCX,KAAM8C,EAAkCnC,EAAlCmC,aAAc9B,EAAoBL,EAApBK,QAASqC,EAAW1C,EAAX0C,OADV,EAEapC,mBAAS,IAFtB,mBAEpBqC,EAFoB,KAENC,EAFM,OAGWtC,mBAAS,IAHpB,mBAGpBuC,EAHoB,KAGPC,EAHO,OAIGxC,oBAAS,GAJZ,mBAIpByC,EAJoB,KAIXC,EAJW,KAM3B,IAAKN,EACD,OACI,6BACI,yCACA,kBAAC,IAAD,CAAMO,GAAG,aAAa7B,UAAU,mCAAhC,eAKA2B,IACRC,GAAW,GACXF,EAAgBzD,EAAkBK,MAClCkD,EAAiBvD,EAAkBM,QAlBZ,MAqBCN,EAApBM,EArBmB,EAqBnBA,MAAOD,EArBY,EAqBZA,KAAMT,EArBM,EAqBNA,GASrB,OACI,6BACI,oCACA,0BAAMoC,SAVd,SAAsBC,GAClBA,EAAEC,iBAEFY,EAAalD,EAAI0D,EAAcE,GAC/BxC,EAAQmB,KAAR,iBAAuBvC,MAOf,yBAAKmC,UAAU,OACX,yBAAKA,UAAU,uBACX,2BACI8B,YAAY,QACZjE,GAAG,QACHE,KAAK,OACLiC,UAAU,WACVK,UAAQ,EACRC,MAAOiB,EACPQ,aAAcxD,EACdgC,SAAU,SAAAL,GAAC,OAAIsB,EAAgBtB,EAAEM,OAAOF,YAIpD,yBAAKN,UAAU,OACX,yBAAKA,UAAU,uBACX,8BACI8B,YAAY,OACZjE,GAAG,OACHmC,UAAU,uBACVY,MAAO,CACHC,OAAQ,SAEZP,MAAOmB,EACPM,aAAczD,EACdiC,SAAU,SAAAL,GAAC,OAAIwB,EAAexB,EAAEM,OAAOF,QACvCD,UAAQ,MAIpB,yBAAKL,UAAU,OACX,yBAAKA,UAAU,uBACX,4BACIA,UAAU,kCACVY,MAAO,CACHE,MAAO,SAHf,e,QC7ETkB,EAfF,WACT,OACI,kBAACC,EAAA,EAAD,KACI,0BACIjD,KAAK,cACLkD,QAAQ,wCAEZ,0BAAMlD,KAAK,SAASkD,QAAQ,mBAC5B,0BAAMC,KAAK,0DAA0DC,IAAI,eACzE,0BAAMA,IAAI,aAAaD,KAAK,qFAC5B,6C,iBCaGE,EAnBI,SAACzD,GAAqB,IAC7B0D,EAA4B1D,EAA5B0D,YAAaC,EAAe3D,EAAf2D,WACrB,OACI,wBAAIvC,UAAU,8BACV,4BACI,kBAAC,IAAD,CAAS6B,GAAG,cAAZ,aAIJ,4BACI,kBAAC,IAAD,CAASW,IAAKF,EAAatC,UAAU,mBAAmByC,cAAaF,EAAYV,GAAG,KAApF,aAEI,uBAAG7B,UAAU,wBAAb,uBCSL0C,EApBE,SAAC9D,GAA0B,IAChCC,EAA6BD,EAA7BC,WAAY8D,EAAiB/D,EAAjB+D,aACpB,OACI,wBAAI3C,UAAU,mBAAmBnC,GAAI8E,GAE7B9D,EAAW6B,KAAI,gBAAG1B,EAAH,EAAGA,KAAM4D,EAAT,EAASA,KAAT,OACX,wBAAIjC,IAAK3B,GACL,kBAAC,IAAD,CAAS6C,GAAI,CACTgB,SAAU,SACVC,KAAK,IAAD,OAAMF,KAET5D,SCHvBd,EAAqB,CACvB6E,cADuB,WAEnB,MChBG,CACHhF,KCGsB,oBF8DfU,EA9CGC,aAZM,SAACC,EAAcC,GACnC,MAAO,CACHC,WAAYF,EAAME,YAAc,MAUGX,EA8C5BO,EAxCA,SAACG,GAAwB,IAC5BC,EAA+BD,EAA/BC,WAAYkE,EAAmBnE,EAAnBmE,cACdC,EAAaC,iBAAgC,MAC7CC,EAAgBD,iBAAiC,MAavD,OAXA1D,qBAAU,WACNwD,IAE8B,OAA1BG,EAAcC,SACdvD,IAAE8C,SAAS5C,KAAKoD,EAAcC,SAEP,OAAvBH,EAAWG,SACXvD,IAAEwD,QAAQtD,KAAKkD,EAAWG,WAE/B,CAACJ,IAGA,kBAAC,WAAD,KACI,4BAAQ/C,UAAU,gBACd,yBAAKA,UAAU,UACX,yBAAKA,UAAU,yBACX,kBAAC,IAAD,CAAM6B,GAAG,IAAI7B,UAAU,cAAvB,YACA,kBAAC,EAAD,CACIuC,WAAW,sBACXD,YAAaY,IAEjB,kBAAC,EAAD,CACIP,aAAa,sBACb9D,WAAYA,OAK5B,yBAAKmB,UAAU,aACVpB,EAAMyE,cGRR5E,EAxBGC,aArBM,SAACC,EAAcC,GAAsB,IAAD,EAClDX,EAA0B,UAAGU,EAAMsC,aAAT,aAAG,EAAaC,MAAK,SAAAjD,GAAI,OAAIA,EAAKJ,KAAOe,EAAMf,MAC/E,MAAO,CACHU,MAAK,OAAEN,QAAF,IAAEA,OAAF,EAAEA,EAAMM,MACbH,OAAM,OAAEH,QAAF,IAAEA,OAAF,EAAEA,EAAMG,OACdP,GAAE,OAAEI,QAAF,IAAEA,OAAF,EAAEA,EAAMJ,MAwCHY,EAlBE,SAACG,GAAkB,IACxBL,EAAsBK,EAAtBL,MAAOH,EAAeQ,EAAfR,OAAQP,EAAOe,EAAPf,GACvB,OACI,yBAAKmC,UAAU,OACX,yBAAKA,UAAU,qBACX,kBAAC,IAAD,CAAM6B,GAAE,iBAAYhE,IAChB,yBAAKmC,UAAU,wBACX,yBAAKA,UAAU,gBACX,0BAAMA,UAAU,cAAczB,GAC9B,iCAAOH,WCSpBK,EApBGC,aAvBM,SAACC,EAAcC,GAAsB,IAAD,EAClDqC,EAA2B,QAAnBrC,EAAMP,SAAN,UACRM,EAAMsC,aADE,aACR,EAAanC,QAAO,SAAAqC,GAAC,OAAIA,EAAE9C,WAAaO,EAAMP,YAC9CM,EAAMsC,MAiBZ,MAAO,CAAEqC,YAfQ,OAAGrC,QAAH,IAAGA,OAAH,EAAGA,EAAOsC,MAAK,SAACC,EAAaC,GAC1C,OAAQ7E,EAAM8E,SACV,IAAK,WACD,OAAOF,EAAEG,UAAYF,EAAEE,UAC3B,IAAK,YACD,OAAOF,EAAEE,UAAYH,EAAEG,UAC3B,IAAK,YACD,OAAOF,EAAEG,UAAYJ,EAAEI,UAC3B,IAAK,aACD,OAAOJ,EAAEI,UAAYH,EAAEG,UAC3B,QACI,OAAO,SA2BRnF,EAdE,SAACG,GAAkB,IAAD,EAC/B,OACI,wBAAIoB,UAAU,cAAd,UAEQpB,EAAM0E,mBAFd,aAEQ,EAAmB5C,KAAI,gBAAG7C,EAAH,EAAGA,GAAH,OACnB,wBAAI8C,IAAK9C,EAAImC,UAAU,mBACnB,kBAAC,EAAD,CAAUnC,GAAIA,YCDvBgG,EArCD,SAACjF,GACX,IAAMP,EAAWO,EAAMkF,SAAShB,KAAOlE,EAAMkF,SAAShB,KAAKiB,MAAM,GAAK,MAD1C,EAEU7E,mBAAuB,aAFjC,mBAErB8E,EAFqB,KAERC,EAFQ,KAe5B,OAXA1E,qBAAU,WACN,IAAMC,EAAWC,SAASC,iBAAiB,UACrCC,EAAYC,EAAEC,WAAWC,KAAKN,GAEpC,OAAO,WAAO,IAAD,gBACYG,GADZ,IACT,2BAAgC,SACnBI,WAFJ,kCAKd,IAGC,6BACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,gCACX,4BAAQ+B,aAAciC,EAAazD,SAAU,SAAAL,GAAC,OAAI+D,EAAe/D,EAAEM,OAAOF,SACtE,4BAAQA,MAAM,aAAd,qBACA,4BAAQA,MAAM,cAAd,sBACA,4BAAQA,MAAM,YAAd,oBACA,4BAAQA,MAAM,aAAd,wBAIZ,6BACI,uCAAajC,GAET,kBAAC,EAAD,CAAUA,SAAUA,EAAUqF,QAASM,OCZpD,SAASE,EAAWC,GACvB,MAAO,CACHpG,KCXmB,cDYnBoG,WAID,SAASC,EAAYvG,EAAYC,GACpC,MAAO,CACHC,KCjBoB,eDkBpBF,KACAC,UEpCD,IAAMuG,EAA8B,CACvCC,QAAS,OACTC,eAAgB,SAChBC,WAAY,UCkCDC,EA7BE,SAAC7F,GAAsB,IAC5B8F,EAA+D9F,EAA/D8F,cAAeC,EAAgD/F,EAAhD+F,cAAeC,EAAiChG,EAAjCgG,gBAAiBC,EAAgBjG,EAAhBiG,YAEvD,OACI,yBAAK7E,UAAU,OACX,yBAAKA,UAAU,SAASY,MAAOyD,GAC3B,0BAAMrE,UAAU,iCAAiC8E,QAASH,EAAe/D,MAAOyD,GAC5E,uBAAGrE,UAAU,wBAAb,kBAGR,yBAAKA,UAAU,SAASY,MAAOyD,GAC3B,0BAAMrE,UAAU,iCAAiC8E,QAASF,EAAiBhE,MAAOyD,GAC9E,uBAAGrE,UAAU,wBAAb,oBAGR,yBAAKA,UAAU,SAASY,MAAOyD,GAC3B,0BAAMrE,UAAU,iCAAiC8E,QAASD,EAAajE,MAAOyD,GAC1E,uBAAGrE,UAAU,wBAAb,UAGR,yBAAKA,UAAU,mBAAmBY,MAAOyD,GACrC,0BAAMrE,UAAU,uCAAuC8E,QAASJ,EAAe9D,MAAOyD,GAClF,uBAAGrE,UAAU,wBAAb,cCaL+E,EApCK,SAACnG,GAAsB,IAC/BuF,EAAsBvF,EAAtBuF,QAASlE,EAAarB,EAAbqB,SADqB,EAEFf,mBAASiF,EAAQ7F,MAFf,mBAE/B0G,EAF+B,KAEnBC,EAFmB,KAStC,OACI,0BAAMhF,SANY,SAACC,GACnBA,EAAEC,iBACFF,EAAS+E,KAKL,yBAAKhF,UAAU,OACf,yBAAKA,UAAU,uBACP,8BACIM,MAAO0E,EACPzE,SAAU,SAAAL,GAAC,OAAI+E,EAAc/E,EAAEM,OAAOF,QACtCN,UAAU,uBACVK,UAAQ,KAGhB,yBAAKL,UAAU,SAASY,MAAOyD,GAC3B,4BACIrE,UAAU,wBACVjC,KAAK,SACL6C,MAAO,CACH0D,QAAS,SAGb,uBAAGtE,UAAU,yBAAb,aC8CTvB,EAhDGC,aAtBM,SAACC,EAAcC,GAAsB,IAAD,EAExD,MAAO,CACHuF,QAFkC,UAAGxF,EAAMuG,gBAAT,aAAG,EAAgBhE,MAAK,SAAAiD,GAAO,OAAIA,EAAQtG,KAAOe,EAAMf,UAMvE,SAACsH,EAAoBvG,GAArB,MAA2C,CAClEwG,SADkE,WAE9DD,EAASf,EAAYxF,EAAMf,GAAI,YAEnCwH,WAJkE,WAK9DF,EAASf,EAAYxF,EAAMf,GAAI,cAEnCyH,SAPkE,WAQ9DH,ELwBG,CACHpH,KChCsB,iBDiCtBF,GK1BuBe,EAAMf,MAEjC0H,SAVkE,SAUzDjH,EAAckH,GACnBL,ELWD,SAAuBtH,EAAY8F,EAAmBrF,GACzD,MAAO,CACHP,KCxBsB,iBDyBtBF,KACAS,OACAqF,aKhBS8B,CAAc7G,EAAMf,GAAI2H,EAAIlH,QAoD9BG,EA1CC,SAACG,GAAkB,IACvBuF,EAAsDvF,EAAtDuF,QAASmB,EAA6C1G,EAA7C0G,SAAUD,EAAmCzG,EAAnCyG,WAAYD,EAAuBxG,EAAvBwG,SAAUG,EAAa3G,EAAb2G,SACzCjH,EAAuC6F,EAAvC7F,KAAMF,EAAiC+F,EAAjC/F,OAAQuF,EAAyBQ,EAAzBR,UAAWC,EAAcO,EAAdP,UAFH,EAGA1E,oBAAS,GAHT,mBAGvBwG,EAHuB,KAGdC,EAHc,KAUxBC,EAAcF,GAChB,yBAAK1F,UAAU,eACX,kBAAC,EAAD,CACIC,SARQ,SAAC+E,GACjBW,GAAW,GACXJ,EAASP,GAAY,IAAIa,MAAOC,YAOxB3B,QAASA,KAKrB,OACI,yBAAKnE,UAAU,kBACX,yBAAKA,UAAU,gBACX,uBAAGA,UAAU,cAAc1B,GAC3B,2BACI,oCAAUF,GACV,qCAAW,IAAIyH,KAAKlC,GAAWoC,mBAEnC,qCAAWnC,IAEf,yBAAK5D,UAAU,eACX,kBAAC,EAAD,CACI2E,cAAeS,EACfR,gBAAiBS,EACjBR,YAAa,kBAAMc,GAAW,SAAAD,GAAO,OAAKA,MAC1ChB,cAAeY,KAGtBM,MC3CEnH,EApBGC,aALM,SAACC,EAAcC,GAAf,YAAqC,CACzDsG,SAAQ,UAAEvG,EAAMuG,gBAAR,aAAE,EAAgBpG,QAAO,SAAAC,GAAC,OAAIA,EAAEiH,WAAapH,EAAMoH,YACtDzC,MAAK,SAACC,EAAgBC,GAAjB,OAAoCA,EAAEE,UAAYH,EAAEG,gBAuBnDlF,EAdK,SAACG,GAAkB,IAAD,EAClC,OACI,wBAAIoB,UAAU,cAAd,UAEQpB,EAAMsG,gBAFd,aAEQ,EAAgBxE,KAAI,gBAAG7C,EAAH,EAAGA,GAAH,OAChB,wBAAImC,UAAU,kBAAkBW,IAAK9C,GACjC,kBAAC,EAAD,CAASA,GAAIA,YCzBxBoI,EAAkB,CAC3B7H,OAAQ,GACRE,KAAM,GACND,SAAU,GACV6H,SAAS,EACTrI,GAAI,GACJ8F,UAAW,EACXpF,MAAO,GACPqF,UAAW,G,QCuEAnF,EAjEGC,YAAQ,MANC,SAACyG,EAAoBvG,GAArB,MAA2C,CAClEqB,SADkE,SACzD7B,EAAgBE,GACrB6G,ERMD,SAA2B7G,EAAcF,EAAgB4H,GAC5D,MAAO,CACHjI,KCH2B,sBDI3BK,SACA4H,WACA1H,QQXS6H,CAAkB7H,EAAMF,EAAQQ,EAAMoH,eAqExCvH,EA3DI,SAACG,GAAkB,IAC1BqB,EAAarB,EAAbqB,SADyB,EAELf,mBAAS,IAFJ,mBAE1Bd,EAF0B,KAElBiB,EAFkB,OAGTH,mBAAS,IAHA,mBAG1BZ,EAH0B,KAGpBc,EAHoB,KAYjC,OACI,0BAAMa,SARY,SAACC,GACnBA,EAAEC,iBACFF,EAAS7B,EAAQE,GACjBe,EAAU,IACVD,EAAQ,MAKJ,yBAAKY,UAAU,OACX,yBAAKA,UAAU,uBACX,2BACInC,GAAG,SACHE,KAAK,OACLiC,UAAU,WACVK,UAAQ,EACRC,MAAOlC,EACPmC,SAAU,SAAAL,GAAC,OAAIb,EAAUa,EAAEM,OAAOF,UAEtC,2BAAOG,QAAQ,UAAf,YAGR,yBAAKT,UAAU,OACX,yBAAKA,UAAU,uBACX,2BACInC,GAAG,OACHE,KAAK,OACLiC,UAAU,WACVK,UAAQ,EACRC,MAAOhC,EACPiC,SAAU,SAAAL,GAAC,OAAId,EAAQc,EAAEM,OAAOF,UAEpC,2BAAOG,QAAQ,UAAf,YAEJ,yBAAKT,UAAU,SAASY,MAAOyD,GAC3B,4BACIrE,UAAU,iCACVjC,KAAK,SACL6C,MAAK,eACEyD,EADF,CAEDxD,OAAQ,OACRC,MAAO,OACPsF,UAAW,sBAGf,uBAAGpG,UAAU,uBAAuBY,MAAO,CAAEyF,SAAU,WAAvD,eCyCT5H,EArEGC,aA5BM,SAACC,EAAcC,GAAgC,IAAD,EAC5D0H,EAAU1H,EAAMwC,MAAMC,OAAexD,GACrCI,EAAI,UAAGU,EAAMsC,aAAT,aAAG,EAAaC,MAAK,SAAAC,GAAC,OAAIA,EAAEtD,KAAOyI,KAC7C,MAAO,CACHrI,KAAMA,EACNqD,SAAQrD,MAIW,SAACkH,EAAoBvG,GAC5C,IAAM0H,EAAU1H,EAAMwC,MAAMC,OAAexD,GAC3C,MAAO,CACHuH,SADG,WAECD,EAASvH,EAAS0I,EAAQ,YAE9BjB,WAJG,WAKCF,EAASvH,EAAS0I,EAAQ,cAE9BC,OAPG,WAQCpB,EtBxBD,CACHpH,KCIgB,WDHhBF,GsBsBqByI,IACjBnB,EThCL,SAAqBtH,GACxB,MAAO,CACHE,KCSoB,eDRpBF,MS6Ba2I,CAAYF,KAEzBhB,SAXG,WAYCH,EtBJD,CACHpH,KCjBmB,cDkBnBF,GsBEwByI,QA0EjB7H,EA/DE,SAACG,GAAkB,IACxB2H,EAAkE3H,EAAlE2H,OAAQtI,EAA0DW,EAA1DX,KAAMoH,EAAoDzG,EAApDyG,WAAYD,EAAwCxG,EAAxCwG,SAAUE,EAA8B1G,EAA9B0G,SAAUrG,EAAoBL,EAApBK,QAASqC,EAAW1C,EAAX0C,OAM/D,GAJA/B,qBAAU,WACNgH,MACD,CAACA,KAECjF,EACD,OACI,6BACI,yCACA,kBAAC,IAAD,CAAMO,GAAG,aAAa7B,UAAU,mCAAhC,eAXmB,MAkB2B/B,GAAcgI,EAAhEpI,EAlBuB,EAkBvBA,GAAIS,EAlBmB,EAkBnBA,KAAMF,EAlBa,EAkBbA,OAAQuF,EAlBK,EAkBLA,UAAWC,EAlBN,EAkBMA,UAAWrF,EAlBjB,EAkBiBA,MAWhD,OACI,6BACI,yBAAKyB,UAAU,kBACX,yBAAKA,UAAU,gBACX,uBAAGA,UAAU,cAAczB,GAC3B,2BACI,oCAAUH,GACV,qCAAW,IAAIyH,KAAKlC,GAAWoC,mBAEnC,qCAAWnC,IAEf,yBAAK5D,UAAU,gBACX,uBAAGA,UAAU,aAAa1B,IAE9B,yBAAK0B,UAAU,eACX,kBAAC,EAAD,CACI2E,cAAeS,EACfR,gBAAiBS,EACjBR,YA3BA,WAChB5F,EAAQmB,KAAR,sBAA4BvC,KA2BZ6G,cAxBE,WAClBzF,EAAQmB,KAAR,kBAAwBnC,EAAKI,WAC7BiH,SA0BI,yBAAKtF,UAAU,QACX,yBAAKA,UAAU,gBACX,0BAAMA,UAAU,cAAhB,YACA,kBAAC,EAAD,CAAYgG,SAAUnI,IACtB,kBAAC,EAAD,CAAamI,SAAUnI,UC9FrCK,EAAqB,CACzBuI,SADyB,WAEvB,MvBVO,CACH1I,KCQiB,YDPjBM,SuBQY,OAElB0E,cAJyB,WAKvB,MfdO,CACHhF,KCGsB,oBcwDfU,EA1CGC,YAAQ,KAAMR,EA0CjBO,EApCH,SAACG,GAAqB,IACxBmE,EAA4BnE,EAA5BmE,cAAe0D,EAAa7H,EAAb6H,SAOvB,OALAlH,qBAAU,WACRkH,IACA1D,MACC,CAACA,EAAe0D,IAGjB,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAK,EAAC9D,KAAK,SACX+D,UAAW9C,IAEb,kBAAC,IAAD,CACEjB,KAAK,aACL+D,UAAWC,IAEb,kBAAC,IAAD,CACEhE,KAAK,kBACL+D,UAAWE,IAEb,kBAAC,IAAD,CACEjE,KAAK,aACL+D,UAAWG,IAEb,kBAAC,IAAD,CAAUjF,GAAG,qB,QCvCjBkF,EAA2B,GAEjC,SAASC,EAAWrI,EAAmBsI,GACnC,OAAOA,EAAOhG,MAAMnC,QAAO,SAAAb,GAAI,OAAKA,EAAKiI,WAG7C,SAASlI,EAAUW,EAAmBsI,GAClC,OAAItI,EAAMuC,MAAK,SAAAC,GAAC,OAAIA,EAAEtD,KAAOoJ,EAAOhJ,KAAKJ,MAC9Bc,EAAM+B,KAAI,SAAAwG,GACb,OAAOA,EAAWrJ,KAAOoJ,EAAOhJ,KAAKJ,GAC/BqJ,EACAD,EAAOhJ,QAGVU,EAAMwI,OAAO,CAACF,EAAOhJ,OAIpC,SAASmJ,EAAQzI,EAAmBsI,GAChC,OAAOtI,EAAMwI,OAAO,CAACF,EAAOhJ,OAGhC,SAAS+C,EAAWrC,EAAmBsI,GACnC,OAAOtI,EAAM+B,KAAI,SAAAwG,GACb,OAAOA,EAAWrJ,KAAOoJ,EAAOpJ,GAC1BqJ,EADC,eAGIA,EAHJ,CAIC3I,MAAO0I,EAAO1I,MACdD,KAAM2I,EAAO3I,UAK7B,SAAS+I,EAAW1I,EAAmBsI,GACnC,OAAOtI,EAAMG,QAAO,SAAAoI,GAAU,OAAIA,EAAWrJ,KAAOoJ,EAAOpJ,MAG/D,SAASD,EAASe,EAAmBsI,GACjC,OAAOtI,EAAM+B,KAAI,SAAAwG,GACb,OAAOA,EAAWrJ,KAAOoJ,EAAOpJ,GAC1BqJ,EADC,eAGIA,EAHJ,CAICtD,UAA6B,WAAlBqD,EAAOnJ,OACZoJ,EAAWtD,UAAY,EACvBsD,EAAWtD,WAAasD,EAAWtD,UAAY,OC7DrE,IAAMmD,EAAgC,GCiBtC,IAAMA,EAA8B,GAEpC,SAASO,EAAc3I,EAAsBsI,GACzC,OAAOA,EAAO/B,SAASpG,QAAO,SAAAqF,GAAO,OAAKA,EAAQ+B,UAAY/B,EAAQoD,iBAG1E,SAASC,GAAa7I,EAAsBsI,GACxC,OAAItI,EAAMuC,MAAK,SAAAnC,GAAC,OAAIA,EAAElB,KAAOoJ,EAAO9C,QAAQtG,MACjCc,EAAM+B,KAAI,SAAA+G,GACb,OAAOA,EAAc5J,KAAOoJ,EAAO9C,QAAQtG,GACrC4J,EACAR,EAAO9C,WAGVxF,EAAMwI,OAAO,CAACF,EAAO9C,UAIpC,SAASD,GAAWvF,EAAsBsI,GACtC,OAAOtI,EAAMwI,OAAO,CAACF,EAAO9C,UAGhC,SAASsB,GAAc9G,EAAsBsI,GACzC,OAAOtI,EAAM+B,KAAI,SAAA+G,GACb,OAAOA,EAAc5J,KAAOoJ,EAAOpJ,GAC7B4J,EADC,eAGIA,EAHJ,CAICnJ,KAAM2I,EAAO3I,KACbqF,UAAWsD,EAAOtD,eAKlC,SAAS+D,GAAc/I,EAAsBsI,GACzC,OAAOtI,EAAM+B,KAAI,SAAA+G,GACb,OAAOA,EAAc5J,KAAOoJ,EAAOpJ,GAC7B4J,EADC,eAGIA,EAHJ,CAICvB,SAAS,OAGhBpH,QAAO,SAAAqF,GAAO,OAAKA,EAAQ+B,UAAY/B,EAAQoD,iBAGxD,SAASF,GAAW1I,EAAsBsI,GACtC,OAAOtI,EAAM+B,KAAI,SAAA+G,GACb,OAAOA,EAAczB,WAAaiB,EAAOpJ,GACnC4J,EADC,eAGIA,EAHJ,CAICF,eAAe,OAGtBzI,QAAO,SAAAqF,GAAO,OAAKA,EAAQ+B,UAAY/B,EAAQoD,iBAGxD,SAASnD,GAAYzF,EAAsBsI,GACvC,OAAOtI,EAAM+B,KAAI,SAAA+G,GACb,OAAOA,EAAc5J,KAAOoJ,EAAOpJ,GAC7B4J,EADC,eAGIA,EAHJ,CAIC7D,UAA6B,WAAlBqD,EAAOnJ,OACZ2J,EAAc7D,UAAY,EAC1B6D,EAAc7D,WAAa6D,EAAc7D,UAAY,OChF5D+D,mBAAgB,CAC3B1G,MH8DW,WAGA,IAFXtC,EAEU,uDAFFoI,EACRE,EACU,uCACV,OAAQA,EAAOlJ,MACX,IvBrDmB,cuBsDf,OAAOiJ,EAAWrI,EAAOsI,GAC7B,IvBtDkB,auBuDd,OAAOjJ,EAAUW,EAAOsI,GAC5B,IvB/DgB,WuBgEZ,OAAOG,EAAQzI,EAAOsI,GAC1B,IvB5DmB,cuB6Df,OAAOI,EAAW1I,EAAOsI,GAC7B,IvB/DmB,cuBgEf,OAAOjG,EAAWrC,EAAOsI,GAC7B,IvBlEiB,YuBmEb,OAAOrJ,EAASe,EAAOsI,GAC3B,QACI,OAAOtI,IG/EfE,WFHW,WAGK,IAFhBF,EAEe,uDAFUoI,EACzBE,EACe,uCACf,OAAQA,EAAOlJ,MACX,IhBDwB,mBgBEpB,OAAOkJ,EAAOpI,WAElB,QACI,OAAOF,IELfuG,SDkFW,WAGG,IAFdvG,EAEa,uDAFLoI,EACRE,EACa,uCACb,OAAQA,EAAOlJ,MACX,IZzEsB,iBY0ElB,OAAOuJ,EAAc3I,EAAOsI,GAChC,IZ1EqB,gBY2EjB,OAAOO,GAAa7I,EAAOsI,GAC/B,IZjFmB,cYkFf,OAAO/C,GAAWvF,EAAOsI,GAC7B,IZhFsB,iBYiFlB,OAAOS,GAAc/I,EAAOsI,GAChC,IZnFsB,iBYoFlB,OAAOxB,GAAc9G,EAAOsI,GAChC,IZtFoB,eYuFhB,OAAO7C,GAAYzF,EAAOsI,GAC9B,IzBxFmB,cyByFf,OAAOI,GAAW1I,EAAOsI,GAC7B,QACI,OAAOtI,M,iEEpGbiJ,GACI,YADJA,GAGI,KAGGC,GAAe,UAJd,OAIc,cAA2BD,GAA3B,YAA0CA,ICXhEE,GAA0BC,KAAMC,OAAO,CACzCH,WACAI,QDW4B,CAC5BC,cAAe,eCsDnB,IAgBeC,GAhBH,CACRpF,cAhEJ,WACI,OAAO+E,GAASM,IAAT,gBAgEP3B,SA7DJ,SAAkBpI,GACd,OAAOyJ,GAASM,IAAT,UAAgB/J,EAAW,IAAMA,EAAW,GAA5C,YA6DPgK,QA1DJ,SAAiBxK,GACb,OAAOiK,GAASM,IAAT,iBAAuBvK,KA0D9BuJ,QAvDJ,SAAiBnJ,GACb,OAAO6J,GAAS7J,KAAT,SAAwBA,IAuD/B+C,WAhDJ,SAAoBnD,EAAYU,EAAeD,GAC3C,OAAOwJ,GAASQ,IAAT,iBAAuBzK,GAAM,CAChCU,QACAD,UA8CJV,SA1CJ,SAAkBC,EAAYC,GAC1B,OAAOgK,GAAS7J,KAAT,iBAAwBJ,GAAM,CACjCC,YAyCJuJ,WAtDJ,SAAoBxJ,GAChB,OAAOiK,GAASS,OAAT,iBAA0B1K,KAsDjC2I,YAtCJ,SAAqB3I,GACjB,OAAOiK,GAASM,IAAT,iBAAuBvK,EAAvB,eAsCP2K,WAnCJ,SAAoBC,GAChB,OAAOX,GAASM,IAAT,oBAA0BK,KAmCjCvE,WA/BJ,SAAoBC,GAChB,OAAO2D,GAAS7J,KAAT,YAA2BkG,IA+BlCuD,cA5BJ,SAAuB7J,GACnB,OAAOiK,GAASS,OAAT,oBAA6B1K,KA4BpC4H,cAzBJ,SAAuB5H,EAAY8F,EAAmBrF,GAClD,OAAOwJ,GAASQ,IAAT,oBAA0BzK,GAAM,CACnC8F,YACArF,UAuBJ8F,YAnBJ,SAAqBvG,EAAYC,GAC7B,OAAOgK,GAAS7J,KAAT,oBAA2BJ,GAAM,CACpCC,a,aCrDE4K,I,aAMAC,I,aAMAC,I,aAkBAC,I,aAKAC,I,aAIAC,I,aAIeC,IA3CzB,SAAUN,GAAazB,GAAvB,4EAEqB,OADT5I,EAAa4I,EAAb5I,SADZ,SAE2B8J,GAAI1B,SAASpI,GAFxC,OAGI,OAHJ,SAEY4K,EAFZ,EAEYA,KAFZ,SAGUX,a9ByCC,CACHvK,KCzCmB,cD0CnBkD,M8B3CiBgI,IAHzB,wCAMA,SAAUN,GAAY1B,GAAtB,0EACqB,OADrB,SAC2BkB,GAAIE,QAAQpB,EAAOpJ,IAD9C,OAGI,OAHJ,SACYoL,EADZ,EACYA,KADZ,SAGUX,aAAItK,EAAUiL,IAHxB,wCAMA,SAAUL,GAAmB3B,GAA7B,oFAaqB,OAZT1I,EAAkC0I,EAAlC1I,MAAOD,EAA2B2I,EAA3B3I,KAAMD,EAAqB4I,EAArB5I,SAAUD,EAAW6I,EAAX7I,OACzBH,EAAa,CACfM,QACAD,OACAD,WACAD,SACAuF,WAAW,IAAIkC,MAAOC,UACtBjI,GAAIqL,eACJhD,SAAS,EACTtC,UAAW,GAVnB,SAa2BuE,GAAIf,QAAQnJ,GAbvC,OAeI,OAfJ,SAaYgL,EAbZ,EAaYA,KAbZ,SAeUX,aAAItK,EAAUiL,IAfxB,wCAkBA,SAAUJ,GAAa5B,GAAvB,kEACI,OADJ,SACUkB,GAAIvK,SAASqJ,EAAOpJ,GAAIoJ,EAAOnJ,QADzC,wCAKA,SAAUgL,GAAe7B,GAAzB,kEACI,OADJ,SACUkB,GAAId,WAAWJ,EAAOpJ,IADhC,wCAIA,SAAUkL,GAAe9B,GAAzB,kEACI,OADJ,SACUkB,GAAInH,WAAWiG,EAAOpJ,GAAIoJ,EAAO1I,MAAO0I,EAAO3I,MADzD,wCAIe,SAAU0K,KAAV,kEACX,OADW,SACLG,a7B/Ce,Y6B+CMT,IADhB,OAEX,OAFW,SAELS,a7B7Cc,W6B6CMR,IAFf,OAGX,OAHW,SAGLQ,a7B/CsB,mB6B+CMP,IAHvB,OAIX,OAJW,SAILO,a7B9Ce,Y6B8CMN,IAJhB,OAKX,OALW,UAKLM,a7B7CiB,c6B6CML,IALlB,QAMX,OANW,UAMLK,a7B/CiB,c6B+CMJ,IANlB,yC,0BCtDLK,I,aAKeC,IALzB,SAAUD,GAAkBnC,GAA5B,0EACqB,OADrB,SAC2BkB,GAAIpF,gBAD/B,OAEI,OAFJ,SACYkG,EADZ,EACYA,KADZ,SAEUX,avBEC,CACHvK,KCFwB,mBDGxBc,WuBJsB,GAAD,oBAAKoK,EAAKpK,YAAV,CAAsB,CAAEG,KAAM,MAAO4D,KAAM,WAFxE,wCAKe,SAAUyG,KAAV,kEACX,OADW,SACLF,atBJoB,iBsBIMC,IADrB,wC,iBCJLE,I,aAMAC,I,aAMAC,I,aAKAC,I,aAKAC,I,aAIAC,I,aAiBeN,IA3CzB,SAAUC,GAAgBrC,GAA1B,0EACqB,OADrB,SAC2BkB,GAAI3B,YAAYS,EAAOpJ,IADlD,OAGI,OAHJ,SACYoL,EADZ,EACYA,KADZ,SAGUX,cAAkBrB,EAAOpJ,GnBkDxB,CACHE,KCtCsB,iBDuCtBmH,SmBpD+B+D,KAHvC,wCAMA,SAAUM,GAAetC,GAAzB,0EACqB,OADrB,SAC2BkB,GAAIK,WAAWvB,EAAOwB,WADjD,OAGI,OAHJ,SACYQ,EADZ,EACYA,KADZ,SAGUX,anBmDC,CACHvK,KC5CqB,gBD6CrBoG,QmBrDmB8E,IAH3B,wCAMA,SAAUO,GAAgBvC,GAA1B,kEACI,OADJ,SACUkB,GAAI/D,YAAY6C,EAAOpJ,GAAIoJ,EAAOnJ,QAD5C,wCAKA,SAAU2L,GAAkBxC,GAA5B,kEACI,OADJ,SACUkB,GAAIT,cAAcT,EAAOpJ,IADnC,wCAKA,SAAU6L,GAAkBzC,GAA5B,kEACI,OADJ,SACUkB,GAAI1C,cAAcwB,EAAOpJ,IAAI,IAAIgI,MAAOC,UAAWmB,EAAO3I,MADpE,wCAIA,SAAUqL,GAAe1C,GAAzB,4EAYqB,OAXX9C,EAAmB,CACrBtG,GAAIqL,eACJvF,WAAW,IAAIkC,MAAOC,UACtB1H,OAAQ6I,EAAO7I,OACfE,KAAM2I,EAAO3I,KACb4H,SAAS,EACTqB,eAAe,EACfvB,SAAUiB,EAAOjB,SACjBpC,UAAW,GATnB,SAY2BuE,GAAIjE,WAAWC,GAZ1C,OAcI,OAdJ,SAYY8E,EAZZ,EAYYA,KAZZ,SAcUX,aAAIpE,EAAW+E,IAdzB,wCAiBe,SAAUI,KAAV,kEACX,OADW,SACLF,alBnCkB,ekBmCMG,IADnB,OAEX,OAFW,SAELH,alBnCiB,ckBmCMI,IAFlB,OAGX,OAHW,SAGLJ,alBnCyB,sBkBmCMQ,IAH1B,OAIX,OAJW,SAILR,alBlCkB,ekBkCMK,IAJnB,OAKX,OALW,UAKLL,alBjCoB,iBkBiCMM,IALrB,QAMX,OANW,UAMLN,alBnCoB,iBkBmCMO,IANrB,yCC5Cf,IAAME,GAAiBC,eAERD,MCHf,IAEeE,IAFWC,OAAeC,sCAAwCC,KAEjDC,YAC5BN,KCFWO,eAAYC,GAAUC,IFKjCT,GAAeU,IAAItB,IACnBY,GAAeU,IAAIjB,IACnBO,GAAeU,IAAIC,IGLvB,IAAMC,GACF,kBAAC,IAAD,CAAUC,MAAOA,IACb,kBAAC,IAAD,KACI,kBAAC,EAAD,QAIZC,IAASC,OAAOH,GAAK/K,SAASmL,eAAe,W","file":"static/js/main.f21b5024.chunk.js","sourcesContent":["import { Post, PostActionTypes, VoteOptions, GET_POSTS, STORE_POSTS, GET_POST, PROCESS_NEW_POST, NEW_POST, DELETE_POST, UPDATE_POST, VOTE_POST, STORE_POST } from './types'\r\n\r\n// API call actions, handled by the sagas\r\nexport function getPosts(category: null | string): PostActionTypes {\r\n    return {\r\n        type: GET_POSTS,\r\n        category,\r\n    }\r\n}\r\n\r\nexport function getPost(id: string): PostActionTypes {\r\n    return {\r\n        type: GET_POST,\r\n        id,\r\n    }\r\n}\r\n\r\nexport function newPost(post: Post): PostActionTypes {\r\n    return {\r\n        type: NEW_POST,\r\n        post,\r\n    }\r\n}\r\n\r\nexport function processNewPost(author: string, body: string, category: string, title: string): PostActionTypes {\r\n    return {\r\n        type: PROCESS_NEW_POST,\r\n        author,\r\n        body,\r\n        category,\r\n        title\r\n    }\r\n}\r\n\r\nexport function deletePost(id: string): PostActionTypes {\r\n    return {\r\n        type: DELETE_POST,\r\n        id,\r\n    }\r\n}\r\n\r\nexport function updatePost(id: string, title: string, body: string): PostActionTypes {\r\n    return {\r\n        type: UPDATE_POST,\r\n        id,\r\n        title,\r\n        body,\r\n    }\r\n}\r\n\r\nexport function votePost(id: string, option: VoteOptions): PostActionTypes {\r\n    return {\r\n        type: VOTE_POST,\r\n        id,\r\n        option,\r\n    }\r\n}\r\n\r\n// Side effects actions\r\nexport function storePosts(posts: Post[]): PostActionTypes {\r\n    return {\r\n        type: STORE_POSTS,\r\n        posts,\r\n    }\r\n}\r\n\r\nexport function storePost(post: Post): PostActionTypes {\r\n    return {\r\n        type: STORE_POST,\r\n        post,\r\n    }\r\n}","export interface Post {\r\n    id: string;\r\n    timestamp: number;\r\n    title: string;\r\n    body: string;\r\n    author: string;\r\n    voteScore: number;\r\n    category: string;\r\n    deleted: boolean;\r\n}\r\n\r\nexport type PostsState = Post[]\r\n\r\nexport const GET_POSTS = 'GET_POSTS'\r\nexport const NEW_POST = 'NEW_POST'\r\nexport const PROCESS_NEW_POST = 'PROCESS_NEW_POST'\r\nexport const GET_POST = 'GET_POST'\r\nexport const VOTE_POST = 'VOTE_POST'\r\nexport const UPDATE_POST = 'UPDATE_POST'\r\nexport const DELETE_POST = 'DELETE_POST'\r\nexport const STORE_POSTS = 'STORE_POSTS'\r\nexport const STORE_POST = 'STORE_POST'\r\n\r\nexport interface GetPostsAction {\r\n    type: typeof GET_POSTS\r\n    category: null | string\r\n}\r\n\r\nexport interface StorePostsAction {\r\n    type: typeof STORE_POSTS\r\n    posts: Post[]\r\n}\r\n\r\nexport interface NewPostAction {\r\n    type: typeof NEW_POST\r\n    post: Post\r\n}\r\n\r\nexport interface ProcessNewPostAction {\r\n    type: typeof PROCESS_NEW_POST\r\n    author: string\r\n    body: string\r\n    category: string\r\n    title: string\r\n}\r\n\r\nexport interface GetPostAction {\r\n    type: typeof GET_POST\r\n    id: string\r\n}\r\n\r\nexport interface StorePostAction {\r\n    type: typeof STORE_POST\r\n    post: Post\r\n}\r\n\r\nexport type VoteOptions = 'upVote' | 'downVote'\r\n\r\nexport interface VotePostAction {\r\n    type: typeof VOTE_POST\r\n    id: string\r\n    option: VoteOptions\r\n}\r\n\r\nexport interface UpdatePostAction {\r\n    type: typeof UPDATE_POST\r\n    id: string\r\n    title: string\r\n    body: string\r\n}\r\n\r\nexport interface DeletePostAction {\r\n    type: typeof DELETE_POST\r\n    id: string\r\n}\r\n\r\nexport type PostActionTypes = DeletePostAction | GetPostsAction | GetPostAction | NewPostAction | VotePostAction | UpdatePostAction | StorePostsAction | StorePostAction | ProcessNewPostAction","import React, { useState, SyntheticEvent, useEffect } from 'react'\r\nimport { connect, ConnectedProps } from 'react-redux'\r\nimport { processNewPost } from '../../../store/posts/actions'\r\nimport { CategoriesState } from '../../../store/categories/types'\r\nimport { State } from '../../../store/types'\r\nimport { RouteComponentProps } from 'react-router'\r\n\r\ntype BaseProps = {}\r\n\r\nconst mapStateToProps = (state: State, props: BaseProps) => {\r\n    return {\r\n        categories: state.categories?.filter(c => c.name !== 'all') as CategoriesState\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    onNewPost(author: string, category: string, body: string, title: string) {\r\n        return processNewPost(author, body, category, title)\r\n    }\r\n}\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps)\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype Props = PropsFromRedux & RouteComponentProps & {}\r\n\r\nconst Post = (props: Props) => {\r\n    const { categories, onNewPost, history } = props\r\n    const [title, setTitle] = useState<string>('')\r\n    const [body, setBody] = useState<string>('')\r\n    const [author, setAuthor] = useState<string>('')\r\n    const [category, setCategory] = useState<string>('')\r\n\r\n    useEffect(() => {\r\n        const elements = document.querySelectorAll('select')\r\n        const instances = M.FormSelect.init(elements)\r\n\r\n        return () => {\r\n            for (let instance of instances) {\r\n                instance.destroy()\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    function handleSubmit(e: SyntheticEvent) {\r\n        e.preventDefault()\r\n\r\n        onNewPost(author, category, body, title)\r\n        history.push(`/posts#${category}`)\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <h2>New Post</h2>\r\n            <form className=\"col s12\" onSubmit={handleSubmit}>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field col s6\">\r\n                        <input\r\n                            id=\"author\"\r\n                            type=\"text\"\r\n                            className=\"validate\"\r\n                            required\r\n                            value={author}\r\n                            onChange={e => setAuthor(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"author\">Author</label>\r\n                    </div>\r\n                    <div className=\"input-field col s6\">\r\n                        <select\r\n                            id='category'\r\n                            onChange={e => setCategory(e.target.value)}\r\n                            required\r\n                        >\r\n                            {categories.map(({ name }) => (\r\n                                <option key={name} value={name}>\r\n                                    {name}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                        <label htmlFor=\"category\">Category</label>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field col s12\">\r\n                        <input\r\n                            id=\"title\"\r\n                            type=\"text\"\r\n                            className=\"validate\"\r\n                            required\r\n                            value={title}\r\n                            onChange={e => setTitle(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"title\">Title</label>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field col s12\">\r\n                        <textarea\r\n                            id=\"body\"\r\n                            className=\"materialize-textarea\"\r\n                            style={{\r\n                                height: '15rem'\r\n                            }}\r\n                            value={body}\r\n                            onChange={e => setBody(e.target.value)}\r\n                            required\r\n                        ></textarea>\r\n                        <label htmlFor=\"body\">Post</label>\r\n                    </div>\r\n                </div>\r\n                <div className='row'>\r\n                    <div className=\"input-field col s12\">\r\n                        <button\r\n                            className='btn btn-large indigo white-text'\r\n                            style={{\r\n                                width: '100%',\r\n                            }}\r\n                        >\r\n                            Post\r\n                            </button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connector(Post)","import React, { useState, SyntheticEvent } from 'react'\r\nimport { connect, ConnectedProps } from 'react-redux'\r\nimport { updatePost } from '../../../store/posts/actions'\r\nimport { State } from '../../../store/types'\r\nimport { Post as PostType } from '../../../store/posts/types'\r\nimport { RouteComponentProps } from 'react-router'\r\nimport { Link } from 'react-router-dom'\r\n\r\ntype BaseProps = {}\r\n\r\nconst mapStateToProps = (state: State, props: RouteComponentProps) => {\r\n    const post = state.posts?.find(p => p.id === (props.match.params as any).id)\r\n    return {\r\n        post,\r\n        exists: post ? true : false\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    onUpdatePost(id: string, title: string, body: string) {\r\n        return updatePost(id, title, body)\r\n    }\r\n}\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps)\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype Props = PropsFromRedux & RouteComponentProps & BaseProps\r\n\r\nconst Post = (props: Props) => {\r\n    const { post, onUpdatePost, history, exists } = props\r\n    const [updatedTitle, setUpdatedTitle] = useState('')\r\n    const [updatedBody, setUpdatedBody] = useState('')\r\n    const [updated, setUpdated] = useState(false)\r\n\r\n    if (!exists) {\r\n        return (\r\n            <div>\r\n                <h2>Not found</h2>\r\n                <Link to='/posts#all' className='btn btn-large indigo white-text'>\r\n                    Go to feed\r\n                </Link>\r\n            </div>\r\n        )\r\n    } else if (!updated) {\r\n        setUpdated(true)\r\n        setUpdatedBody((post as PostType).body)\r\n        setUpdatedTitle((post as PostType).title)\r\n    }\r\n\r\n    const { title, body, id } = post as PostType\r\n\r\n    function handleSubmit(e: SyntheticEvent) {\r\n        e.preventDefault()\r\n\r\n        onUpdatePost(id, updatedTitle, updatedBody)\r\n        history.push(`/posts/${id}`)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Edit</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field col s12\">\r\n                        <input\r\n                            placeholder='Title'\r\n                            id=\"title\"\r\n                            type=\"text\"\r\n                            className=\"validate\"\r\n                            required\r\n                            value={updatedTitle}\r\n                            defaultValue={title}\r\n                            onChange={e => setUpdatedTitle(e.target.value)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field col s12\">\r\n                        <textarea\r\n                            placeholder='Post'\r\n                            id=\"body\"\r\n                            className=\"materialize-textarea\"\r\n                            style={{\r\n                                height: '15rem'\r\n                            }}\r\n                            value={updatedBody}\r\n                            defaultValue={body}\r\n                            onChange={e => setUpdatedBody(e.target.value)}\r\n                            required\r\n                        ></textarea>\r\n                    </div>\r\n                </div>\r\n                <div className='row'>\r\n                    <div className=\"input-field col s12\">\r\n                        <button\r\n                            className='btn btn-large indigo white-text'\r\n                            style={{\r\n                                width: '100%',\r\n                            }}\r\n                        >\r\n                            Post\r\n                            </button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connector(Post)","import React from 'react'\r\nimport { Helmet } from 'react-helmet'\r\n\r\n\r\nconst Head = () => {\r\n    return (\r\n        <Helmet>\r\n            <meta\r\n                name=\"description\"\r\n                content=\"Readable: Anonymous reading website\"\r\n            />\r\n            <meta name='author' content='Mahmoud Ahmedy' />\r\n            <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\" />\r\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css\" />\r\n            <title>Readable</title>\r\n        </Helmet>\r\n    )\r\n}\r\n\r\nexport default Head","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\ntype NavProps = {\r\n    dropdownRef: React.MutableRefObject<null | HTMLAnchorElement>\r\n    dataTarget: string\r\n}\r\n\r\nconst Navigation = (props: NavProps) => {\r\n    const { dropdownRef, dataTarget } = props\r\n    return (\r\n        <ul className='right hide-on-med-and-down'>\r\n            <li>\r\n                <NavLink to='/posts/new'>\r\n                    New Post\r\n                </NavLink>\r\n            </li>\r\n            <li>\r\n                <NavLink ref={dropdownRef} className=\"dropdown-trigger\" data-target={dataTarget} to='#' >\r\n                    Categories\r\n                    <i className=\"material-icons right\">arrow_drop_down</i>\r\n                </NavLink>\r\n            </li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Navigation","import { CategoriesState } from \"../../../../store/categories/types\"\r\nimport React from \"react\"\r\nimport { NavLink } from \"react-router-dom\"\r\n\r\ntype DropdownProps = {\r\n    categories: CategoriesState\r\n    dataTargetId: string\r\n}\r\n\r\nconst Dropdown = (props: DropdownProps) => {\r\n    const { categories, dataTargetId } = props\r\n    return (\r\n        <ul className='dropdown-content' id={dataTargetId}>\r\n            {\r\n                categories.map(({ name, path }) => (\r\n                    <li key={name}>\r\n                        <NavLink to={{\r\n                            pathname: '/posts',\r\n                            hash: `#${path}`\r\n                        }}>\r\n                            {name}\r\n                        </NavLink>\r\n                    </li>\r\n                ))\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Dropdown","import React, { Fragment, useEffect, useRef } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport M from 'materialize-css'\r\nimport { getCategories } from '../../../store/categories/actions'\r\nimport { State } from '../../../store/types'\r\nimport { connect, ConnectedProps } from 'react-redux'\r\nimport Navigation from './Navigation/Navigation'\r\nimport Dropdown from './Navigation/Dropdown'\r\n\r\ntype BaseProps = React.PropsWithChildren<{}>\r\n\r\nconst mapStateToProps = (state: State, props: BaseProps) => {\r\n    return {\r\n        categories: state.categories || []\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    getCategories() {\r\n        return getCategories()\r\n    }\r\n}\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps)\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype LayoutProps = BaseProps & PropsFromRedux\r\n\r\nconst Layout = (props: LayoutProps) => {\r\n    const { categories, getCategories, } = props\r\n    const sidenavRef = useRef<null | HTMLUListElement>(null)\r\n    const categoryDDRef = useRef<null | HTMLAnchorElement>(null)\r\n\r\n    useEffect(() => {\r\n        getCategories()\r\n\r\n        if (categoryDDRef.current !== null) {\r\n            M.Dropdown.init(categoryDDRef.current)\r\n        }\r\n        if (sidenavRef.current !== null) {\r\n            M.Sidenav.init(sidenavRef.current)\r\n        }\r\n    }, [getCategories])\r\n\r\n    return (\r\n        <Fragment>\r\n            <header className='navbar-fixed'>\r\n                <nav className='indigo'>\r\n                    <div className='nav-wrapper container'>\r\n                        <Link to='/' className='brand-logo'>Readable</Link>\r\n                        <Navigation\r\n                            dataTarget='categories-dropdown'\r\n                            dropdownRef={categoryDDRef}\r\n                        />\r\n                        <Dropdown\r\n                            dataTargetId='categories-dropdown'\r\n                            categories={categories}\r\n                        />\r\n                    </div>\r\n                </nav>\r\n            </header>\r\n            <div className='container'>\r\n                {props.children}\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default connector(Layout)","import { CategoryActionTypes, GET_CATEGORIES, CategoriesState, STORE_CATEGORIES } from './types';\r\n\r\nexport function getCategories(): CategoryActionTypes {\r\n    return {\r\n        type: GET_CATEGORIES,\r\n    }\r\n}\r\n\r\nexport function storeCategories(categories: CategoriesState): CategoryActionTypes {\r\n    return {\r\n        type: STORE_CATEGORIES,\r\n        categories,\r\n    }\r\n}","export interface Category {\r\n    name: string\r\n    path: string\r\n}\r\n\r\nexport type CategoriesState = Category[]\r\n\r\nexport const GET_CATEGORIES = 'GET_CATEGORIES'\r\nexport const STORE_CATEGORIES = 'STORE_CATEGORIES'\r\n\r\nexport interface GetCategoriesAction {\r\n    type: typeof GET_CATEGORIES\r\n}\r\n\r\nexport interface StoreCategoriesAction {\r\n    type: typeof STORE_CATEGORIES\r\n    categories: CategoriesState\r\n}\r\n\r\nexport type CategoryActionTypes = GetCategoriesAction | StoreCategoriesAction","import React from 'react'\r\nimport { connect, ConnectedProps } from 'react-redux'\r\nimport { Post as PostType } from '../../../store/posts/types'\r\nimport { Link } from 'react-router-dom'\r\nimport { State } from '../../../store/types'\r\n\r\ntype BaseProps = {\r\n    id: string\r\n}\r\n\r\nconst mapStateToProps = (state: State, props: BaseProps) => {\r\n    const post: PostType | undefined = state.posts?.find(post => post.id === props.id)\r\n    return {\r\n        title: post?.title,\r\n        author: post?.author,\r\n        id: post?.id\r\n    }\r\n}\r\n/* \r\nconst mapDispatchToProps = {\r\n    onUpvote(id: string) {\r\n        return votePost(id, 'upVote')\r\n    },\r\n    onDownvote(id: string) {\r\n        return votePost(id, 'downVote')\r\n    },\r\n    onDelete(id: string) {\r\n        return deletePost(id)\r\n    }\r\n} */\r\n\r\nconst connector = connect(mapStateToProps)\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype Props = PropsFromRedux & {}\r\n\r\nconst PostCard = (props: Props) => {\r\n    const { title, author, id } = props\r\n    return (\r\n        <div className='row'>\r\n            <div className='col s10 offset-s1'>\r\n                <Link to={`/posts/${id}`}>\r\n                    <div className='card white z-depth-1'>\r\n                        <div className='card-content'>\r\n                            <span className='card-title'>{title}</span>\r\n                            <p>By {author}</p>\r\n                        </div>\r\n                    </div>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connector(PostCard)","import React from 'react'\r\nimport { State } from '../../../store/types'\r\nimport { Post as PostType } from '../../../store/posts/types'\r\nimport { connect, ConnectedProps } from 'react-redux'\r\nimport PostCard from '../PostCard/PostCard'\r\nimport { OrderOptions } from './types'\r\n\r\ntype BaseProps = {\r\n    category: string\r\n    orderBy: OrderOptions\r\n}\r\n\r\nconst mapStateToProps = (state: State, props: BaseProps) => {\r\n    const posts = props.category !== 'all'\r\n        ? state.posts?.filter(p => p.category === props.category)\r\n        : state.posts\r\n\r\n    const sortedPosts = posts?.sort((a: PostType, b: PostType) => {\r\n        switch (props.orderBy) {\r\n            case 'date-asc':\r\n                return a.timestamp - b.timestamp\r\n            case 'date-desc':\r\n                return b.timestamp - a.timestamp\r\n            case 'votes-asc':\r\n                return b.voteScore - a.voteScore\r\n            case 'votes-desc':\r\n                return a.voteScore - b.voteScore\r\n            default:\r\n                return 0\r\n        }\r\n    })\r\n\r\n    return { sortedPosts, }\r\n}\r\n\r\nconst connector = connect(mapStateToProps)\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype Props = BaseProps & PropsFromRedux\r\n\r\nconst PostList = (props: Props) => {\r\n    return (\r\n        <ul className='collection'>\r\n            {\r\n                props.sortedPosts?.map(({ id }) => (\r\n                    <li key={id} className='collection-item'>\r\n                        <PostCard id={id} />\r\n                    </li>\r\n                ))\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default connector(PostList)","import React, { useEffect, useState } from 'react'\r\nimport { RouteComponentProps } from 'react-router-dom'\r\nimport PostList from '../../components/PostList/PostList'\r\nimport { OrderOptions } from '../../components/PostList/types'\r\n\r\ntype BaseProps = {}\r\n\r\ntype Props = RouteComponentProps & BaseProps\r\n\r\nconst Posts = (props: Props) => {\r\n    const category = props.location.hash ? props.location.hash.slice(1) : 'all'\r\n    const [orderParams, setOrderParams] = useState<OrderOptions>('votes-asc')\r\n\r\n    useEffect(() => {\r\n        const elements = document.querySelectorAll('select')\r\n        const instances = M.FormSelect.init(elements)\r\n\r\n        return () => {\r\n            for (let instance of instances) {\r\n                instance.destroy()\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <div className='row'>\r\n                <div className='input-field col s8 offset-s2'>\r\n                    <select defaultValue={orderParams} onChange={e => setOrderParams(e.target.value as OrderOptions)}>\r\n                        <option value='votes-asc'>Votes - Ascending</option>\r\n                        <option value='votes-desc'>Votes - Descending</option>\r\n                        <option value='date-asc'>Date - Ascending</option>\r\n                        <option value='date-desc'>Date - Descending</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <h4>Showing {category}</h4>\r\n                {\r\n                    <PostList category={category} orderBy={orderParams} />\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Posts","import { VoteOptions } from './../posts/types';\r\nimport { Comment, CommentActionTypes, GET_COMMENT, GET_COMMENTS, NEW_COMMENT, VOTE_COMMENT, UPDATE_COMMENT, DELETE_COMMENT, STORE_COMMENTS, CommentsState, PROCESS_NEW_COMMENT, STORE_COMMENT } from './types';\r\n\r\n\r\nexport function getComments(id: string): CommentActionTypes {\r\n    return {\r\n        type: GET_COMMENTS,\r\n        id,\r\n    }\r\n}\r\n\r\nexport function getComment(commentId: string): CommentActionTypes {\r\n    return {\r\n        type: GET_COMMENT,\r\n        commentId,\r\n    }\r\n}\r\n\r\nexport function processNewComment(body: string, author: string, parentId: string): CommentActionTypes {\r\n    return {\r\n        type: PROCESS_NEW_COMMENT,\r\n        author,\r\n        parentId,\r\n        body,\r\n    }\r\n}\r\n\r\nexport function newComment(comment: Comment): CommentActionTypes {\r\n    return {\r\n        type: NEW_COMMENT,\r\n        comment,\r\n    }\r\n}\r\n\r\nexport function voteComment(id: string, option: VoteOptions): CommentActionTypes {\r\n    return {\r\n        type: VOTE_COMMENT,\r\n        id,\r\n        option,\r\n    }\r\n}\r\n\r\nexport function updateComment(id: string, timestamp: number, body: string): CommentActionTypes {\r\n    return {\r\n        type: UPDATE_COMMENT,\r\n        id,\r\n        body,\r\n        timestamp,\r\n    }\r\n}\r\n\r\nexport function deleteComment(id: string): CommentActionTypes {\r\n    return {\r\n        type: DELETE_COMMENT,\r\n        id,\r\n    }\r\n}\r\n\r\nexport function storeComments(id: string, comments: CommentsState): CommentActionTypes {\r\n    return {\r\n        type: STORE_COMMENTS,\r\n        comments,\r\n    }\r\n}\r\n\r\nexport function storeComment(comment: Comment): CommentActionTypes {\r\n    return {\r\n        type: STORE_COMMENT,\r\n        comment,\r\n    }\r\n}","import { VoteOptions } from './../posts/types';\r\n\r\nexport interface Comment {\r\n    id: string\r\n    parentId: string\r\n    timestamp: number\r\n    body: string\r\n    author: string\r\n    voteScore: number\r\n    deleted: boolean\r\n    parentDeleted: boolean\r\n}\r\n\r\nexport type CommentsState = Comment[]\r\n\r\nexport const GET_COMMENTS = 'GET_COMMENTS'\r\nexport const GET_COMMENT = 'GET_COMMENT'\r\nexport const PROCESS_NEW_COMMENT = 'PROCESS_NEW_COMMENT'\r\nexport const NEW_COMMENT = 'NEW_COMMENT'\r\nexport const VOTE_COMMENT = 'VOTE_COMMENT'\r\nexport const UPDATE_COMMENT = 'UPDATE_COMMENT'\r\nexport const DELETE_COMMENT = 'DELETE_COMMENT'\r\nexport const STORE_COMMENTS = 'STORE_COMMENTS'\r\nexport const STORE_COMMENT = 'STORE_COMMENT'\r\n\r\nexport interface GetCommentsAction {\r\n    type: typeof GET_COMMENTS\r\n    id: string\r\n}\r\n\r\nexport interface GetCommentAction {\r\n    type: typeof GET_COMMENT\r\n    commentId: string\r\n}\r\n\r\nexport interface ProcessNewComment {\r\n    type: typeof PROCESS_NEW_COMMENT\r\n    body: string\r\n    author: string\r\n    parentId: string\r\n}\r\n\r\nexport interface NewCommentAction {\r\n    type: typeof NEW_COMMENT\r\n    comment: Comment\r\n}\r\n\r\nexport interface VoteCommentAction {\r\n    type: typeof VOTE_COMMENT\r\n    id: string\r\n    option: VoteOptions\r\n}\r\n\r\nexport interface UpdateCommentAction {\r\n    type: typeof UPDATE_COMMENT\r\n    id: string\r\n    body: string\r\n    timestamp: number\r\n}\r\n\r\nexport interface DeleteCommentAction {\r\n    type: typeof DELETE_COMMENT\r\n    id: string\r\n}\r\n\r\nexport interface StoreCommentsAction {\r\n    type: typeof STORE_COMMENTS\r\n    comments: CommentsState\r\n}\r\n\r\nexport interface StoreCommentAction {\r\n    type: typeof STORE_COMMENT\r\n    comment: Comment\r\n}\r\n\r\nexport type CommentActionTypes = GetCommentsAction | GetCommentAction | ProcessNewComment | NewCommentAction | UpdateCommentAction | VoteCommentAction | DeleteCommentAction | StoreCommentsAction | StoreCommentAction","import { CSSProperties } from 'react'\r\n\r\nexport const centeralized: CSSProperties = {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center'\r\n}","import React from 'react'\r\nimport { centeralized } from '../../common/styles'\r\n\r\ntype BaseProps = {\r\n    deleteHandler: () => void\r\n    upvoteHandler: () => void\r\n    downvoteHandler: () => void\r\n    editHandler: () => void\r\n}\r\n\r\nconst Controls = (props: BaseProps) => {\r\n    const { deleteHandler, upvoteHandler, downvoteHandler, editHandler } = props\r\n\r\n    return (\r\n        <div className='row'>\r\n            <div className='col s2' style={centeralized}>\r\n                <span className='btn-floating indigo white-text' onClick={upvoteHandler} style={centeralized}>\r\n                    <i className='large material-icons'>arrow_upward</i>\r\n                </span>\r\n            </div>\r\n            <div className='col s2' style={centeralized}>\r\n                <span className='btn-floating indigo white-text' onClick={downvoteHandler} style={centeralized}>\r\n                    <i className='large material-icons'>arrow_downward</i>\r\n                </span>\r\n            </div>\r\n            <div className='col s2' style={centeralized}>\r\n                <span className='btn-floating indigo white-text' onClick={editHandler} style={centeralized}>\r\n                    <i className='large material-icons'>edit</i>\r\n                </span>\r\n            </div>\r\n            <div className='col s2 offset-s4' style={centeralized}>\r\n                <span className='btn-floating red darken-1 white-text' onClick={deleteHandler} style={centeralized}>\r\n                    <i className='large material-icons'>delete</i>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Controls","import React, { useState, SyntheticEvent } from 'react'\r\nimport { Comment as CommentType } from '../../../store/comments/types'\r\nimport { centeralized } from '../../common/styles'\r\n\r\ntype BaseProps = {\r\n    comment: CommentType\r\n    onSubmit: (body: string) => void\r\n}\r\n\r\nconst EditComment = (props: BaseProps) => {\r\n    const { comment, onSubmit } = props\r\n    const [editedBody, setEditedBody] = useState(comment.body)\r\n\r\n    const submitHandler = (e: SyntheticEvent) => {\r\n        e.preventDefault()\r\n        onSubmit(editedBody)\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={submitHandler}>\r\n            <div className='row'>\r\n            <div className='input-field col s10'>\r\n                    <textarea\r\n                        value={editedBody}\r\n                        onChange={e => setEditedBody(e.target.value)}\r\n                        className=\"materialize-textarea\"\r\n                        required\r\n                    />\r\n                </div>\r\n                <div className='col s2' style={centeralized}>\r\n                    <button\r\n                        className='btn indigo white-text'\r\n                        type='submit'\r\n                        style={{\r\n                            display: 'flex'\r\n                        }}\r\n                    >\r\n                        <i className='material-icons medium'>done</i>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default EditComment","import React, { useState } from 'react'\r\nimport { connect, ConnectedProps } from 'react-redux'\r\nimport { Comment as CommentType } from '../../../store/comments/types'\r\nimport { voteComment, deleteComment, updateComment } from '../../../store/comments/actions'\r\nimport { State } from '../../../store/types'\r\nimport { Dispatch } from 'redux'\r\nimport Controls from '../Controls/Controls'\r\nimport EditComment from '../EditComment/EditComment'\r\n\r\ntype BaseProps = {\r\n    id: string\r\n}\r\n\r\nconst mapStateToProps = (state: State, props: BaseProps) => {\r\n    const comment: CommentType | undefined = state.comments?.find(comment => comment.id === props.id)\r\n    return {\r\n        comment: comment as CommentType\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch, props: BaseProps) => ({\r\n    onUpvote() {\r\n        dispatch(voteComment(props.id, 'upVote'))\r\n    },\r\n    onDownvote() {\r\n        dispatch(voteComment(props.id, 'downVote'))\r\n    },\r\n    onDelete() {\r\n        dispatch(deleteComment(props.id))\r\n    },\r\n    onUpdate(body: string, ts: number) {\r\n        dispatch(updateComment(props.id, ts, body))\r\n    }\r\n})\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps)\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype Props = PropsFromRedux & BaseProps\r\n\r\nconst Comment = (props: Props) => {\r\n    const { comment, onDelete, onDownvote, onUpvote, onUpdate } = props\r\n    const { body, author, timestamp, voteScore } = comment\r\n    const [editing, setEditing] = useState(false)\r\n\r\n    const editHandler = (editedBody: string) => {\r\n        setEditing(false)\r\n        onUpdate(editedBody, new Date().getTime())\r\n    }\r\n\r\n    const editElement = editing && (\r\n        <div className='card-action'>\r\n            <EditComment\r\n                onSubmit={editHandler}\r\n                comment={comment}\r\n            />\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div className='card z-depth-1'>\r\n            <div className='card-content'>\r\n                <p className='card-title'>{body}</p>\r\n                <p>\r\n                    <span>By {author}</span>\r\n                    <span> at {new Date(timestamp).toLocaleString()}</span>\r\n                </p>\r\n                <p>Votes: {voteScore}</p>\r\n            </div>\r\n            <div className='card-action'>\r\n                <Controls\r\n                    upvoteHandler={onUpvote}\r\n                    downvoteHandler={onDownvote}\r\n                    editHandler={() => setEditing(editing => !editing)}\r\n                    deleteHandler={onDelete}\r\n                />\r\n            </div>\r\n            {editElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connector(Comment)","import React from 'react'\r\nimport { State } from '../../../store/types'\r\nimport { Comment as CommentType } from '../../../store/comments/types'\r\nimport { connect, ConnectedProps } from 'react-redux'\r\nimport Comment from '../Comment/Comment'\r\n\r\ntype BaseProps = {\r\n    parentId: string\r\n}\r\n\r\nconst mapStateToProps = (state: State, props: BaseProps) => ({\r\n    comments: state.comments?.filter(c => c.parentId === props.parentId)\r\n        .sort((a: CommentType, b: CommentType) => b.timestamp - a.timestamp)\r\n})\r\n\r\nconst connector = connect(mapStateToProps)\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype Props = BaseProps & PropsFromRedux\r\n\r\nconst CommentList = (props: Props) => {\r\n    return (\r\n        <ul className='collection'>\r\n            {\r\n                props.comments?.map(({ id }) => (\r\n                    <li className='collection-item' key={id}>\r\n                        <Comment id={id} />\r\n                    </li>\r\n                ))\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default connector(CommentList)","import { Post } from './../../store/posts/types'\r\n\r\nexport const emptyPost: Post = {\r\n    author: '',\r\n    body: '',\r\n    category: '',\r\n    deleted: false,\r\n    id: '',\r\n    timestamp: 0,\r\n    title: '',\r\n    voteScore: 0\r\n}","import React, { useState, SyntheticEvent } from 'react'\r\nimport { centeralized } from '../../common/styles'\r\nimport { Dispatch } from 'redux'\r\nimport { processNewComment } from '../../../store/comments/actions'\r\nimport { connect, ConnectedProps } from 'react-redux'\r\n\r\ntype BaseProps = {\r\n    parentId: string\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch, props: BaseProps) => ({\r\n    onSubmit(author: string, body: string) {\r\n        dispatch(processNewComment(body, author, props.parentId))\r\n    }\r\n})\r\n\r\nconst connector = connect(null, mapDispatchToProps)\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype Props = BaseProps & PropsFromRedux\r\n\r\nconst NewComment = (props: Props) => {\r\n    const { onSubmit } = props\r\n    const [author, setAuthor] = useState('')\r\n    const [body, setBody] = useState('')\r\n\r\n    const submitHandler = (e: SyntheticEvent) => {\r\n        e.preventDefault()\r\n        onSubmit(author, body)\r\n        setAuthor('')\r\n        setBody('')\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={submitHandler}>\r\n            <div className='row'>\r\n                <div className=\"input-field col s10\">\r\n                    <input\r\n                        id=\"author\"\r\n                        type=\"text\"\r\n                        className=\"validate\"\r\n                        required\r\n                        value={author}\r\n                        onChange={e => setAuthor(e.target.value)}\r\n                    />\r\n                    <label htmlFor=\"author\">Author</label>\r\n                </div>\r\n            </div>\r\n            <div className='row'>\r\n                <div className='input-field col s10'>\r\n                    <input\r\n                        id=\"body\"\r\n                        type=\"text\"\r\n                        className=\"validate\"\r\n                        required\r\n                        value={body}\r\n                        onChange={e => setBody(e.target.value)}\r\n                    />\r\n                    <label htmlFor=\"author\">Comment</label>\r\n                </div>\r\n                <div className='col s2' style={centeralized}>\r\n                    <button\r\n                        className='btn-floating indigo white-text'\r\n                        type='submit'\r\n                        style={{\r\n                            ...centeralized,\r\n                            height: '4rem',\r\n                            width: '4rem',\r\n                            transform: 'translateY(-75%)',\r\n                        }}\r\n                    >\r\n                        <i className='large material-icons' style={{ fontSize: '2.5rem' }}>done</i>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n        </form >\r\n    )\r\n}\r\n\r\nexport default connector(NewComment)","import React, { useEffect } from 'react'\r\nimport { State } from '../../../store/types'\r\nimport { votePost, deletePost, getPost } from '../../../store/posts/actions'\r\nimport { connect, ConnectedProps } from 'react-redux'\r\nimport { Dispatch } from 'redux'\r\nimport { RouteComponentProps } from 'react-router'\r\nimport CommentList from '../../components/CommentList/CommentList'\r\nimport { getComments } from '../../../store/comments/actions'\r\nimport Controls from '../../components/Controls/Controls'\r\nimport { Post as PostType } from '../../../store/posts/types'\r\nimport { emptyPost } from '../../common/helpers'\r\nimport NewComment from '../../components/NewComment/NewComment'\r\nimport { Link } from 'react-router-dom'\r\n\r\ntype BaseProps = {}\r\n\r\nconst mapStateToProps = (state: State, props: RouteComponentProps) => {\r\n    const postId = (props.match.params as any).id\r\n    const post = state.posts?.find(p => p.id === postId)\r\n    return {\r\n        post: post as PostType,\r\n        exists: post ? true : false\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch, props: RouteComponentProps) => {\r\n    const postId = (props.match.params as any).id\r\n    return {\r\n        onUpvote() {\r\n            dispatch(votePost(postId, 'upVote'))\r\n        },\r\n        onDownvote() {\r\n            dispatch(votePost(postId, 'downVote'))\r\n        },\r\n        onLoad() {\r\n            dispatch(getPost(postId))\r\n            dispatch(getComments(postId))\r\n        },\r\n        onDelete() {\r\n            dispatch(deletePost(postId))\r\n        }\r\n    }\r\n}\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps)\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype Props = BaseProps & PropsFromRedux & RouteComponentProps\r\n\r\nconst PostView = (props: Props) => {\r\n    const { onLoad, post, onDownvote, onUpvote, onDelete, history, exists } = props\r\n\r\n    useEffect(() => {\r\n        onLoad()\r\n    }, [onLoad])\r\n\r\n    if (!exists) {\r\n        return (\r\n            <div>\r\n                <h2>Not found</h2>\r\n                <Link to='/posts#all' className='btn btn-large indigo white-text'>\r\n                    Go to feed\r\n                </Link>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const { id, body, author, timestamp, voteScore, title } = post ? post : emptyPost\r\n\r\n    const editHandler = () => {\r\n        history.push(`/posts/edit/${id}`)\r\n    }\r\n\r\n    const deleteHandler = () => {\r\n        history.push(`/posts/#${post.category}`)\r\n        onDelete()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className='card z-depth-2'>\r\n                <div className='card-content'>\r\n                    <p className='card-title'>{title}</p>\r\n                    <p>\r\n                        <span>By {author}</span>\r\n                        <span> at {new Date(timestamp).toLocaleString()}</span>\r\n                    </p>\r\n                    <p>Votes: {voteScore}</p>\r\n                </div>\r\n                <div className='card-content'>\r\n                    <p className='flow-text'>{body}</p>\r\n                </div>\r\n                <div className='card-action'>\r\n                    <Controls\r\n                        upvoteHandler={onUpvote}\r\n                        downvoteHandler={onDownvote}\r\n                        editHandler={editHandler}\r\n                        deleteHandler={deleteHandler}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className='card'>\r\n                <div className='card-content'>\r\n                    <span className='card-title'>Comments</span>\r\n                    <NewComment parentId={id} />\r\n                    <CommentList parentId={id} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connector(PostView)","import React, { useEffect, Fragment } from 'react'\nimport { connect, ConnectedProps } from 'react-redux'\nimport { getPosts } from '../store/posts/actions'\nimport { getCategories } from '../store/categories/actions'\nimport { Switch, Route, BrowserRouterProps, Redirect } from 'react-router-dom'\nimport NewPost from './routes/NewPost/NewPost'\nimport EditPost from './routes/EditPost/EditPost'\nimport Head from './components/Head/Head'\nimport Layout from './components/Layout/Layout'\nimport Posts from './routes/Posts/Posts'\nimport PostView from './routes/PostView/PostView'\n\nconst mapDispatchToProps = {\n  getPosts() {\n    return getPosts(null)\n  },\n  getCategories() {\n    return getCategories()\n  }\n}\n\nconst connector = connect(null, mapDispatchToProps)\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype AppProps = PropsFromRedux & BrowserRouterProps & {}\n\nconst App = (props: AppProps) => {\n  const { getCategories, getPosts } = props\n\n  useEffect(() => {\n    getPosts()\n    getCategories()\n  }, [getCategories, getPosts])\n\n  return (\n    <Fragment>\n      <Head />\n      <Layout>\n        <Switch>\n          <Route\n            exact path='/posts'\n            component={Posts}\n          />\n          <Route\n            path='/posts/new'\n            component={NewPost}\n          />\n          <Route\n            path='/posts/edit/:id'\n            component={EditPost}\n          />\n          <Route\n            path='/posts/:id'\n            component={PostView}\n          />\n          <Redirect to='/posts#all' />\n        </Switch>\n      </Layout>\n    </Fragment>\n  )\n}\n\nexport default connector(App)","import {\r\n    PostsState,\r\n    PostActionTypes,\r\n    StorePostsAction,\r\n    StorePostAction,\r\n    NewPostAction,\r\n    DeletePostAction,\r\n    UpdatePostAction,\r\n    VotePostAction,\r\n    STORE_POSTS,\r\n    STORE_POST,\r\n    NEW_POST,\r\n    DELETE_POST,\r\n    UPDATE_POST,\r\n    VOTE_POST\r\n} from './types'\r\n\r\nconst initialState: PostsState = []\r\n\r\nfunction storePosts(state: PostsState, action: StorePostsAction): PostsState {\r\n    return action.posts.filter(post => !post.deleted)\r\n}\r\n\r\nfunction storePost(state: PostsState, action: StorePostAction): PostsState {\r\n    if (state.find(p => p.id === action.post.id)) {\r\n        return state.map(storedPost => {\r\n            return storedPost.id !== action.post.id\r\n                ? storedPost\r\n                : action.post\r\n        })\r\n    } else {\r\n        return state.concat([action.post])\r\n    }\r\n}\r\n\r\nfunction newPost(state: PostsState, action: NewPostAction): PostsState {\r\n    return state.concat([action.post])\r\n}\r\n\r\nfunction updatePost(state: PostsState, action: UpdatePostAction): PostsState {\r\n    return state.map(storedPost => {\r\n        return storedPost.id !== action.id\r\n            ? storedPost\r\n            : {\r\n                ...storedPost,\r\n                title: action.title,\r\n                body: action.body\r\n            }\r\n    })\r\n}\r\n\r\nfunction deletePost(state: PostsState, action: DeletePostAction): PostsState {\r\n    return state.filter(storedPost => storedPost.id !== action.id)\r\n}\r\n\r\nfunction votePost(state: PostsState, action: VotePostAction): PostsState {\r\n    return state.map(storedPost => {\r\n        return storedPost.id !== action.id\r\n            ? storedPost\r\n            : {\r\n                ...storedPost,\r\n                voteScore: action.option === 'upVote'\r\n                    ? storedPost.voteScore + 1\r\n                    : storedPost.voteScore && storedPost.voteScore - 1\r\n            }\r\n    })\r\n}\r\n\r\nexport default function posts(\r\n    state = initialState,\r\n    action: PostActionTypes\r\n): PostsState {\r\n    switch (action.type) {\r\n        case STORE_POSTS:\r\n            return storePosts(state, action)\r\n        case STORE_POST:\r\n            return storePost(state, action)\r\n        case NEW_POST:\r\n            return newPost(state, action)\r\n        case DELETE_POST:\r\n            return deletePost(state, action)\r\n        case UPDATE_POST:\r\n            return updatePost(state, action)\r\n        case VOTE_POST:\r\n            return votePost(state, action)\r\n        default:\r\n            return state\r\n    }\r\n}","import { CategoriesState, CategoryActionTypes, STORE_CATEGORIES } from './types';\r\n\r\nconst initialState: CategoriesState = []\r\n\r\nexport default function categories(\r\n    state: CategoriesState = initialState,\r\n    action: CategoryActionTypes\r\n): CategoriesState {\r\n    switch (action.type) {\r\n        case STORE_CATEGORIES:\r\n            return action.categories\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { DeletePostAction, PostActionTypes } from './../posts/types';\r\nimport {\r\n    CommentsState,\r\n    CommentActionTypes,\r\n    DeleteCommentAction,\r\n    NewCommentAction,\r\n    StoreCommentsAction,\r\n    UpdateCommentAction,\r\n    VoteCommentAction,\r\n    STORE_COMMENTS,\r\n    STORE_COMMENT,\r\n    DELETE_COMMENT,\r\n    NEW_COMMENT,\r\n    UPDATE_COMMENT,\r\n    VOTE_COMMENT,\r\n    StoreCommentAction\r\n} from './types'\r\nimport { DELETE_POST } from '../posts/types'\r\n\r\nconst initialState: CommentsState = []\r\n\r\nfunction storeComments(state: CommentsState, action: StoreCommentsAction): CommentsState {\r\n    return action.comments.filter(comment => !comment.deleted && !comment.parentDeleted)\r\n}\r\n\r\nfunction storeComment(state: CommentsState, action: StoreCommentAction): CommentsState {\r\n    if (state.find(c => c.id === action.comment.id)) {\r\n        return state.map(storedComment => {\r\n            return storedComment.id !== action.comment.id\r\n                ? storedComment\r\n                : action.comment\r\n        })\r\n    } else {\r\n        return state.concat([action.comment])\r\n    }\r\n}\r\n\r\nfunction newComment(state: CommentsState, action: NewCommentAction): CommentsState {\r\n    return state.concat([action.comment])\r\n}\r\n\r\nfunction updateComment(state: CommentsState, action: UpdateCommentAction): CommentsState {\r\n    return state.map(storedComment => {\r\n        return storedComment.id !== action.id\r\n            ? storedComment\r\n            : {\r\n                ...storedComment,\r\n                body: action.body,\r\n                timestamp: action.timestamp,\r\n            }\r\n    })\r\n}\r\n\r\nfunction deleteComment(state: CommentsState, action: DeleteCommentAction): CommentsState {\r\n    return state.map(storedComment => {\r\n        return storedComment.id !== action.id\r\n            ? storedComment\r\n            : {\r\n                ...storedComment,\r\n                deleted: true\r\n            }\r\n    })\r\n        .filter(comment => !comment.deleted && !comment.parentDeleted)\r\n}\r\n\r\nfunction deletePost(state: CommentsState, action: DeletePostAction): CommentsState {\r\n    return state.map(storedComment => {\r\n        return storedComment.parentId !== action.id\r\n            ? storedComment\r\n            : {\r\n                ...storedComment,\r\n                parentDeleted: true\r\n            }\r\n    })\r\n        .filter(comment => !comment.deleted && !comment.parentDeleted)\r\n}\r\n\r\nfunction voteComment(state: CommentsState, action: VoteCommentAction): CommentsState {\r\n    return state.map(storedComment => {\r\n        return storedComment.id !== action.id\r\n            ? storedComment\r\n            : {\r\n                ...storedComment,\r\n                voteScore: action.option === 'upVote'\r\n                    ? storedComment.voteScore + 1\r\n                    : storedComment.voteScore && storedComment.voteScore - 1\r\n            }\r\n    })\r\n}\r\n\r\nexport default function Comments(\r\n    state = initialState,\r\n    action: CommentActionTypes | PostActionTypes\r\n): CommentsState {\r\n    switch (action.type) {\r\n        case STORE_COMMENTS:\r\n            return storeComments(state, action)\r\n        case STORE_COMMENT:\r\n            return storeComment(state, action)\r\n        case NEW_COMMENT:\r\n            return newComment(state, action)\r\n        case DELETE_COMMENT:\r\n            return deleteComment(state, action)\r\n        case UPDATE_COMMENT:\r\n            return updateComment(state, action)\r\n        case VOTE_COMMENT:\r\n            return voteComment(state, action)\r\n        case DELETE_POST:\r\n            return deletePost(state, action)\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux'\r\nimport posts from '../posts/reducers'\r\nimport categories from '../categories/reducers'\r\nimport comments from '../comments/reducers'\r\n\r\nexport default combineReducers({\r\n    posts,\r\n    categories,\r\n    comments,\r\n})","interface Config {\r\n    host: string,\r\n    protocol: string,\r\n    port: number\r\n}\r\n\r\ninterface Headers {\r\n    Authorization: string\r\n}\r\n\r\nconst config: Config = {\r\n    host: 'localhost',\r\n    protocol: 'http',\r\n    port: 3001\r\n}\r\n\r\nexport const baseURL: string = `${config.protocol}://${config.host}:${config.port}`\r\n\r\nexport const headers: Headers = {\r\n    Authorization: '123456789'\r\n}","import axios, { AxiosResponse, AxiosInstance } from 'axios'\r\nimport { baseURL, headers } from './config'\r\nimport { Post, VoteOptions } from '../store/posts/types'\r\nimport { Comment } from '../store/comments/types'\r\n\r\nconst instance: AxiosInstance = axios.create({\r\n    baseURL,\r\n    headers\r\n})\r\n\r\nfunction getCategories() {\r\n    return instance.get(`/categories`)\r\n}\r\n\r\nfunction getPosts(category: string | null): Promise<AxiosResponse<Post[]>> {\r\n    return instance.get(`${category ? '/' + category : ''}/posts`)\r\n}\r\n\r\nfunction getPost(id: string): Promise<AxiosResponse<Post>> {\r\n    return instance.get(`/posts/${id}`)\r\n}\r\n\r\nfunction newPost(post: Post) {\r\n    return instance.post(`/posts`, post)\r\n}\r\n\r\nfunction deletePost(id: string) {\r\n    return instance.delete(`/posts/${id}`)\r\n}\r\n\r\nfunction updatePost(id: string, title: string, body: string) {\r\n    return instance.put(`/posts/${id}`, {\r\n        title,\r\n        body,\r\n    })\r\n}\r\n\r\nfunction votePost(id: string, option: VoteOptions) {\r\n    return instance.post(`/posts/${id}`, {\r\n        option,\r\n    })\r\n}\r\n\r\nfunction getComments(id: string) {\r\n    return instance.get(`/posts/${id}/comments`)\r\n}\r\n\r\nfunction getComment(commentId: string) {\r\n    return instance.get(`/comments/${commentId}`)\r\n}\r\n\r\n// new, delete, update, vote\r\nfunction newComment(comment: Comment) {\r\n    return instance.post(`/comments`, comment)\r\n}\r\n\r\nfunction deleteComment(id: string) {\r\n    return instance.delete(`/comments/${id}`)\r\n}\r\n\r\nfunction updateComment(id: string, timestamp: number, body: string) {\r\n    return instance.put(`/comments/${id}`, {\r\n        timestamp,\r\n        body,\r\n    })\r\n}\r\n\r\nfunction voteComment(id: string, option: VoteOptions) {\r\n    return instance.post(`/comments/${id}`, {\r\n        option,\r\n    })\r\n}\r\n\r\nconst API = {\r\n    getCategories,\r\n    getPosts,\r\n    getPost,\r\n    newPost,\r\n    updatePost,\r\n    votePost,\r\n    deletePost,\r\n    getComments,\r\n    getComment,\r\n    newComment,\r\n    deleteComment,\r\n    updateComment,\r\n    voteComment\r\n}\r\n\r\nexport default API","import { v1 as uuid } from 'uuid'\r\nimport { ProcessNewPostAction, Post, PROCESS_NEW_POST, VOTE_POST, VotePostAction, DeletePostAction, DELETE_POST, GET_POST, GetPostAction, UpdatePostAction, UPDATE_POST, PostsState } from './types';\r\n\r\nimport { put, takeEvery } from 'redux-saga/effects'\r\nimport API from '../../api'\r\n\r\nimport {\r\n    GET_POSTS,\r\n    GetPostsAction\r\n} from './../posts/types'\r\n\r\nimport {\r\n    storePosts,\r\n    storePost\r\n} from '../posts/actions'\r\n\r\nfunction* getPostsSaga(action: GetPostsAction) {\r\n    const { category } = action\r\n    const { data } = yield API.getPosts(category)\r\n    yield put(storePosts(data as PostsState))\r\n}\r\n\r\nfunction* getPostSaga(action: GetPostAction) {\r\n    const { data } = yield API.getPost(action.id)\r\n\r\n    yield put(storePost(data as Post))\r\n}\r\n\r\nfunction* processNewPostSaga(action: ProcessNewPostAction) {\r\n    const { title, body, category, author } = action\r\n    const post: Post = {\r\n        title,\r\n        body,\r\n        category,\r\n        author,\r\n        timestamp: new Date().getTime(),\r\n        id: uuid(),\r\n        deleted: false,\r\n        voteScore: 0\r\n    }\r\n\r\n    const { data } = yield API.newPost(post)\r\n\r\n    yield put(storePost(data as Post))\r\n}\r\n\r\nfunction* votePostSaga(action: VotePostAction) {\r\n    yield API.votePost(action.id, action.option)\r\n\r\n}\r\n\r\nfunction* deletePostSaga(action: DeletePostAction) {\r\n    yield API.deletePost(action.id)\r\n}\r\n\r\nfunction* updatePostSaga(action: UpdatePostAction) {\r\n    yield API.updatePost(action.id, action.title, action.body)\r\n}\r\n\r\nexport default function* postsSaga() {\r\n    yield takeEvery(GET_POSTS, getPostsSaga)\r\n    yield takeEvery(GET_POST, getPostSaga)\r\n    yield takeEvery(PROCESS_NEW_POST, processNewPostSaga)\r\n    yield takeEvery(VOTE_POST, votePostSaga)\r\n    yield takeEvery(DELETE_POST, deletePostSaga)\r\n    yield takeEvery(UPDATE_POST, updatePostSaga)\r\n}","import { GET_CATEGORIES, GetCategoriesAction, CategoriesState } from './types';\r\nimport { takeEvery, put } from 'redux-saga/effects';\r\nimport API from '../../api';\r\nimport { storeCategories } from './actions';\r\n\r\nfunction* getCategoriesSaga(action: GetCategoriesAction) {\r\n    const { data } = yield API.getCategories()\r\n    yield put(storeCategories([...data.categories, { name: 'all', path: 'all' }] as CategoriesState))\r\n}\r\n\r\nexport default function* categoriesSaga() {\r\n    yield takeEvery(GET_CATEGORIES, getCategoriesSaga)\r\n}","import { v1 as uuid } from 'uuid'\r\nimport { Comment, GET_COMMENT, GET_COMMENTS, GetCommentAction, GetCommentsAction, CommentsState, VoteCommentAction, VOTE_COMMENT, UpdateCommentAction, DeleteCommentAction, DELETE_COMMENT, UPDATE_COMMENT, PROCESS_NEW_COMMENT, ProcessNewComment } from './types';\r\nimport { takeEvery, put } from 'redux-saga/effects';\r\nimport API from '../../api';\r\nimport { storeComments, storeComment, newComment } from './actions'\r\n\r\nfunction* getCommentsSaga(action: GetCommentsAction) {\r\n    const { data } = yield API.getComments(action.id)\r\n\r\n    yield put(storeComments(action.id, data as CommentsState))\r\n}\r\n\r\nfunction* getCommentSaga(action: GetCommentAction) {\r\n    const { data } = yield API.getComment(action.commentId)\r\n\r\n    yield put(storeComment(data as Comment))\r\n}\r\n\r\nfunction* voteCommentSaga(action: VoteCommentAction) {\r\n    yield API.voteComment(action.id, action.option)\r\n\r\n}\r\n\r\nfunction* deleteCommentSaga(action: DeleteCommentAction) {\r\n    yield API.deleteComment(action.id)\r\n\r\n}\r\n\r\nfunction* updateCommentSaga(action: UpdateCommentAction) {\r\n    yield API.updateComment(action.id, new Date().getTime(), action.body)\r\n}\r\n\r\nfunction* newCommentSaga(action: ProcessNewComment) {\r\n    const comment: Comment = {\r\n        id: uuid(),\r\n        timestamp: new Date().getTime(),\r\n        author: action.author,\r\n        body: action.body,\r\n        deleted: false,\r\n        parentDeleted: false,\r\n        parentId: action.parentId,\r\n        voteScore: 1\r\n    }\r\n\r\n    const { data } = yield API.newComment(comment)\r\n\r\n    yield put(newComment(data as Comment))\r\n}\r\n\r\nexport default function* categoriesSaga() {\r\n    yield takeEvery(GET_COMMENTS, getCommentsSaga)\r\n    yield takeEvery(GET_COMMENT, getCommentSaga)\r\n    yield takeEvery(PROCESS_NEW_COMMENT, newCommentSaga)\r\n    yield takeEvery(VOTE_COMMENT, voteCommentSaga)\r\n    yield takeEvery(DELETE_COMMENT, deleteCommentSaga)\r\n    yield takeEvery(UPDATE_COMMENT, updateCommentSaga)\r\n}","import createSagaMiddleware from 'redux-saga'\r\nimport postsSaga from '../posts/sagas'\r\nimport categoriesSaga from '../categories/sagas'\r\nimport commentsSaga from '../comments/sagas'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nexport default sagaMiddleware\r\n\r\nexport function runSagas() {\r\n    sagaMiddleware.run(postsSaga)\r\n    sagaMiddleware.run(categoriesSaga)\r\n    sagaMiddleware.run(commentsSaga)\r\n}","import { applyMiddleware, compose } from 'redux'\r\nimport sagaMiddleware from '../sagas'\r\n\r\n\r\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nexport default composeEnhancers(applyMiddleware(\r\n    sagaMiddleware\r\n))","import { createStore } from 'redux'\r\nimport reducers from './reducers'\r\nimport middleware from './middleware'\r\nimport { runSagas } from './sagas'\r\n\r\nexport default createStore(reducers, middleware)\r\n\r\nrunSagas()","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport App from './app/App'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nconst app = (\n    <Provider store={store}>\n        <Router>\n            <App />\n        </Router>\n    </Provider>\n)\nReactDOM.render(app, document.getElementById('root'))"],"sourceRoot":""}